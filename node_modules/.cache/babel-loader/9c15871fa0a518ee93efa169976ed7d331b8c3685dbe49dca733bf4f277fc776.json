{"ast":null,"code":"import { gridColumnDefinitionsSelector, gridVisibleColumnDefinitionsSelector } from '../columns';\nimport { gridFilteredSortedRowIdsSelector } from '../filter';\nimport { gridPinnedRowsSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\nexport const getColumnsToExport = _ref => {\n  let {\n    apiRef,\n    options\n  } = _ref;\n  const columns = gridColumnDefinitionsSelector(apiRef);\n  if (options.fields) {\n    return options.fields.map(field => columns.find(column => column.field === field)).filter(column => !!column);\n  }\n  const validColumns = options.allColumns ? columns : gridVisibleColumnDefinitionsSelector(apiRef);\n  return validColumns.filter(column => !column.disableExport);\n};\nexport const defaultGetRowsToExport = _ref2 => {\n  let {\n    apiRef\n  } = _ref2;\n  var _pinnedRows$top, _pinnedRows$bottom;\n  const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef);\n  const rowTree = gridRowTreeSelector(apiRef);\n  const selectedRows = apiRef.current.getSelectedRows();\n  const bodyRows = filteredSortedRowIds.filter(id => {\n    var _rowTree$id$position;\n    return ((_rowTree$id$position = rowTree[id].position) != null ? _rowTree$id$position : 'body') === 'body';\n  });\n  const pinnedRows = gridPinnedRowsSelector(apiRef);\n  const topPinnedRowsIds = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.map(row => row.id)) || [];\n  const bottomPinnedRowsIds = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.map(row => row.id)) || [];\n  bodyRows.unshift(...topPinnedRowsIds);\n  bodyRows.push(...bottomPinnedRowsIds);\n  if (selectedRows.size > 0) {\n    return bodyRows.filter(id => selectedRows.has(id));\n  }\n  return bodyRows;\n};","map":{"version":3,"names":["gridColumnDefinitionsSelector","gridVisibleColumnDefinitionsSelector","gridFilteredSortedRowIdsSelector","gridPinnedRowsSelector","gridRowTreeSelector","getColumnsToExport","_ref","apiRef","options","columns","fields","map","field","find","column","filter","validColumns","allColumns","disableExport","defaultGetRowsToExport","_ref2","_pinnedRows$top","_pinnedRows$bottom","filteredSortedRowIds","rowTree","selectedRows","current","getSelectedRows","bodyRows","id","_rowTree$id$position","position","pinnedRows","topPinnedRowsIds","top","row","bottomPinnedRowsIds","bottom","unshift","push","size","has"],"sources":["/Users/mtc/Yara/task2/react-admin/node_modules/@mui/x-data-grid/hooks/features/export/utils.js"],"sourcesContent":["import { gridColumnDefinitionsSelector, gridVisibleColumnDefinitionsSelector } from '../columns';\nimport { gridFilteredSortedRowIdsSelector } from '../filter';\nimport { gridPinnedRowsSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\nexport const getColumnsToExport = ({\n  apiRef,\n  options\n}) => {\n  const columns = gridColumnDefinitionsSelector(apiRef);\n\n  if (options.fields) {\n    return options.fields.map(field => columns.find(column => column.field === field)).filter(column => !!column);\n  }\n\n  const validColumns = options.allColumns ? columns : gridVisibleColumnDefinitionsSelector(apiRef);\n  return validColumns.filter(column => !column.disableExport);\n};\nexport const defaultGetRowsToExport = ({\n  apiRef\n}) => {\n  var _pinnedRows$top, _pinnedRows$bottom;\n\n  const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef);\n  const rowTree = gridRowTreeSelector(apiRef);\n  const selectedRows = apiRef.current.getSelectedRows();\n  const bodyRows = filteredSortedRowIds.filter(id => {\n    var _rowTree$id$position;\n\n    return ((_rowTree$id$position = rowTree[id].position) != null ? _rowTree$id$position : 'body') === 'body';\n  });\n  const pinnedRows = gridPinnedRowsSelector(apiRef);\n  const topPinnedRowsIds = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.map(row => row.id)) || [];\n  const bottomPinnedRowsIds = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.map(row => row.id)) || [];\n  bodyRows.unshift(...topPinnedRowsIds);\n  bodyRows.push(...bottomPinnedRowsIds);\n\n  if (selectedRows.size > 0) {\n    return bodyRows.filter(id => selectedRows.has(id));\n  }\n\n  return bodyRows;\n};"],"mappings":"AAAA,SAASA,6BAA6B,EAAEC,oCAAoC,QAAQ,YAAY;AAChG,SAASC,gCAAgC,QAAQ,WAAW;AAC5D,SAASC,sBAAsB,EAAEC,mBAAmB,QAAQ,0BAA0B;AACtF,OAAO,MAAMC,kBAAkB,GAAGC,IAAA,IAG5B;EAAA,IAH6B;IACjCC,MAAM;IACNC;EACF,CAAC,GAAAF,IAAA;EACC,MAAMG,OAAO,GAAGT,6BAA6B,CAACO,MAAM,CAAC;EAErD,IAAIC,OAAO,CAACE,MAAM,EAAE;IAClB,OAAOF,OAAO,CAACE,MAAM,CAACC,GAAG,CAACC,KAAK,IAAIH,OAAO,CAACI,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACF,KAAK,KAAKA,KAAK,CAAC,CAAC,CAACG,MAAM,CAACD,MAAM,IAAI,CAAC,CAACA,MAAM,CAAC;EAC/G;EAEA,MAAME,YAAY,GAAGR,OAAO,CAACS,UAAU,GAAGR,OAAO,GAAGR,oCAAoC,CAACM,MAAM,CAAC;EAChG,OAAOS,YAAY,CAACD,MAAM,CAACD,MAAM,IAAI,CAACA,MAAM,CAACI,aAAa,CAAC;AAC7D,CAAC;AACD,OAAO,MAAMC,sBAAsB,GAAGC,KAAA,IAEhC;EAAA,IAFiC;IACrCb;EACF,CAAC,GAAAa,KAAA;EACC,IAAIC,eAAe,EAAEC,kBAAkB;EAEvC,MAAMC,oBAAoB,GAAGrB,gCAAgC,CAACK,MAAM,CAAC;EACrE,MAAMiB,OAAO,GAAGpB,mBAAmB,CAACG,MAAM,CAAC;EAC3C,MAAMkB,YAAY,GAAGlB,MAAM,CAACmB,OAAO,CAACC,eAAe,EAAE;EACrD,MAAMC,QAAQ,GAAGL,oBAAoB,CAACR,MAAM,CAACc,EAAE,IAAI;IACjD,IAAIC,oBAAoB;IAExB,OAAO,CAAC,CAACA,oBAAoB,GAAGN,OAAO,CAACK,EAAE,CAAC,CAACE,QAAQ,KAAK,IAAI,GAAGD,oBAAoB,GAAG,MAAM,MAAM,MAAM;EAC3G,CAAC,CAAC;EACF,MAAME,UAAU,GAAG7B,sBAAsB,CAACI,MAAM,CAAC;EACjD,MAAM0B,gBAAgB,GAAG,CAACD,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACX,eAAe,GAAGW,UAAU,CAACE,GAAG,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGb,eAAe,CAACV,GAAG,CAACwB,GAAG,IAAIA,GAAG,CAACN,EAAE,CAAC,KAAK,EAAE;EACvJ,MAAMO,mBAAmB,GAAG,CAACJ,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAACV,kBAAkB,GAAGU,UAAU,CAACK,MAAM,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGf,kBAAkB,CAACX,GAAG,CAACwB,GAAG,IAAIA,GAAG,CAACN,EAAE,CAAC,KAAK,EAAE;EACnKD,QAAQ,CAACU,OAAO,CAAC,GAAGL,gBAAgB,CAAC;EACrCL,QAAQ,CAACW,IAAI,CAAC,GAAGH,mBAAmB,CAAC;EAErC,IAAIX,YAAY,CAACe,IAAI,GAAG,CAAC,EAAE;IACzB,OAAOZ,QAAQ,CAACb,MAAM,CAACc,EAAE,IAAIJ,YAAY,CAACgB,GAAG,CAACZ,EAAE,CAAC,CAAC;EACpD;EAEA,OAAOD,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}