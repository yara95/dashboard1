{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { DEFAULT_GRID_COL_TYPE_KEY, getGridDefaultColumnTypes } from '../../../colDef';\nimport { gridColumnsSelector, gridColumnVisibilityModelSelector } from './gridColumnsSelector';\nimport { clamp } from '../../../utils/utils';\nexport const COLUMNS_DIMENSION_PROPERTIES = ['maxWidth', 'minWidth', 'width', 'flex'];\nexport const computeColumnTypes = function () {\n  let customColumnTypes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const mergedColumnTypes = _extends({}, getGridDefaultColumnTypes());\n  Object.entries(customColumnTypes).forEach(_ref => {\n    let [colType, colTypeDef] = _ref;\n    if (mergedColumnTypes[colType]) {\n      mergedColumnTypes[colType] = _extends({}, mergedColumnTypes[colType], colTypeDef);\n    } else {\n      mergedColumnTypes[colType] = _extends({}, mergedColumnTypes[colTypeDef.extendType || DEFAULT_GRID_COL_TYPE_KEY], colTypeDef);\n    }\n  });\n  return mergedColumnTypes;\n};\n/**\n * Computes width for flex columns.\n * Based on CSS Flexbox specification:\n * https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths\n */\n\nexport function computeFlexColumnsWidth(_ref2) {\n  let {\n    initialFreeSpace,\n    totalFlexUnits,\n    flexColumns\n  } = _ref2;\n  const flexColumnsLookup = {\n    all: {},\n    frozenFields: [],\n    freeze: field => {\n      const value = flexColumnsLookup.all[field];\n      if (value && value.frozen !== true) {\n        flexColumnsLookup.all[field].frozen = true;\n        flexColumnsLookup.frozenFields.push(field);\n      }\n    }\n  }; // Step 5 of https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths\n\n  function loopOverFlexItems() {\n    // 5a: If all the flex items on the line are frozen, free space has been distributed.\n    if (flexColumnsLookup.frozenFields.length === flexColumns.length) {\n      return;\n    }\n    const violationsLookup = {\n      min: {},\n      max: {}\n    };\n    let remainingFreeSpace = initialFreeSpace;\n    let flexUnits = totalFlexUnits;\n    let totalViolation = 0; // 5b: Calculate the remaining free space\n\n    flexColumnsLookup.frozenFields.forEach(field => {\n      remainingFreeSpace -= flexColumnsLookup.all[field].computedWidth;\n      flexUnits -= flexColumnsLookup.all[field].flex;\n    });\n    for (let i = 0; i < flexColumns.length; i += 1) {\n      const column = flexColumns[i];\n      if (flexColumnsLookup.all[column.field] && flexColumnsLookup.all[column.field].frozen === true) {\n        // eslint-disable-next-line no-continue\n        continue;\n      } // 5c: Distribute remaining free space proportional to the flex factors\n\n      const widthPerFlexUnit = remainingFreeSpace / flexUnits;\n      let computedWidth = widthPerFlexUnit * column.flex; // 5d: Fix min/max violations\n\n      if (computedWidth < column.minWidth) {\n        totalViolation += column.minWidth - computedWidth;\n        computedWidth = column.minWidth;\n        violationsLookup.min[column.field] = true;\n      } else if (computedWidth > column.maxWidth) {\n        totalViolation += column.maxWidth - computedWidth;\n        computedWidth = column.maxWidth;\n        violationsLookup.max[column.field] = true;\n      }\n      flexColumnsLookup.all[column.field] = {\n        frozen: false,\n        computedWidth,\n        flex: column.flex\n      };\n    } // 5e: Freeze over-flexed items\n\n    if (totalViolation < 0) {\n      // Freeze all the items with max violations\n      Object.keys(violationsLookup.max).forEach(field => {\n        flexColumnsLookup.freeze(field);\n      });\n    } else if (totalViolation > 0) {\n      // Freeze all the items with min violations\n      Object.keys(violationsLookup.min).forEach(field => {\n        flexColumnsLookup.freeze(field);\n      });\n    } else {\n      // Freeze all items\n      flexColumns.forEach(_ref3 => {\n        let {\n          field\n        } = _ref3;\n        flexColumnsLookup.freeze(field);\n      });\n    } // 5f: Return to the start of this loop\n\n    loopOverFlexItems();\n  }\n  loopOverFlexItems();\n  return flexColumnsLookup.all;\n}\n/**\n * Compute the `computedWidth` (ie: the width the column should have during rendering) based on the `width` / `flex` / `minWidth` / `maxWidth` properties of `GridColDef`.\n * The columns already have been merged with there `type` default values for `minWidth`, `maxWidth` and `width`, thus the `!` for those properties below.\n * TODO: Unit test this function in depth and only keep basic cases for the whole grid testing.\n * TODO: Improve the `GridColDef` typing to reflect the fact that `minWidth` / `maxWidth` and `width` can't be null after the merge with the `type` default values.\n */\n\nexport const hydrateColumnsWidth = (rawState, viewportInnerWidth) => {\n  const columnsLookup = {};\n  let totalFlexUnits = 0;\n  let widthAllocatedBeforeFlex = 0;\n  const flexColumns = []; // For the non-flex columns, compute their width\n  // For the flex columns, compute there minimum width and how much width must be allocated during the flex allocation\n\n  rawState.all.forEach(columnField => {\n    const newColumn = _extends({}, rawState.lookup[columnField]);\n    if (rawState.columnVisibilityModel[columnField] === false) {\n      newColumn.computedWidth = 0;\n    } else {\n      let computedWidth;\n      if (newColumn.flex && newColumn.flex > 0) {\n        totalFlexUnits += newColumn.flex;\n        computedWidth = 0;\n        flexColumns.push(newColumn);\n      } else {\n        computedWidth = clamp(newColumn.width, newColumn.minWidth, newColumn.maxWidth);\n      }\n      widthAllocatedBeforeFlex += computedWidth;\n      newColumn.computedWidth = computedWidth;\n    }\n    columnsLookup[columnField] = newColumn;\n  });\n  const initialFreeSpace = Math.max(viewportInnerWidth - widthAllocatedBeforeFlex, 0); // Allocate the remaining space to the flex columns\n\n  if (totalFlexUnits > 0 && viewportInnerWidth > 0) {\n    const computedColumnWidths = computeFlexColumnsWidth({\n      initialFreeSpace,\n      totalFlexUnits,\n      flexColumns\n    });\n    Object.keys(computedColumnWidths).forEach(field => {\n      columnsLookup[field].computedWidth = computedColumnWidths[field].computedWidth;\n    });\n  }\n  return _extends({}, rawState, {\n    lookup: columnsLookup\n  });\n};\nlet columnTypeWarnedOnce = false;\n/**\n * Apply the order and the dimensions of the initial state.\n * The columns not registered in `orderedFields` will be placed after the imported columns.\n */\n\nexport const applyInitialState = (columnsState, initialState) => {\n  if (!initialState) {\n    return columnsState;\n  }\n  const {\n    orderedFields = [],\n    dimensions = {}\n  } = initialState;\n  const columnsWithUpdatedDimensions = Object.keys(dimensions);\n  if (columnsWithUpdatedDimensions.length === 0 && orderedFields.length === 0) {\n    return columnsState;\n  }\n  const orderedFieldsLookup = {};\n  const cleanOrderedFields = [];\n  for (let i = 0; i < orderedFields.length; i += 1) {\n    const field = orderedFields[i]; // Ignores the fields in the initialState that matches no field on the current column state\n\n    if (columnsState.lookup[field]) {\n      orderedFieldsLookup[field] = true;\n      cleanOrderedFields.push(field);\n    }\n  }\n  const newOrderedFields = cleanOrderedFields.length === 0 ? columnsState.all : [...cleanOrderedFields, ...columnsState.all.filter(field => !orderedFieldsLookup[field])];\n  const newColumnLookup = _extends({}, columnsState.lookup);\n  for (let i = 0; i < columnsWithUpdatedDimensions.length; i += 1) {\n    const field = columnsWithUpdatedDimensions[i];\n    const newColDef = _extends({}, newColumnLookup[field], {\n      hasBeenResized: true\n    });\n    Object.entries(dimensions[field]).forEach(_ref4 => {\n      let [key, value] = _ref4;\n      newColDef[key] = value === -1 ? Infinity : value;\n    });\n    newColumnLookup[field] = newColDef;\n  }\n  const newColumnsState = {\n    all: newOrderedFields,\n    lookup: newColumnLookup\n  };\n  return newColumnsState;\n};\n/**\n * @deprecated Should have been internal only, you can inline the logic.\n */\n\nexport const getGridColDef = (columnTypes, type) => {\n  if (!type) {\n    return columnTypes[DEFAULT_GRID_COL_TYPE_KEY];\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (!columnTypeWarnedOnce && !columnTypes[type]) {\n      console.warn([`MUI: The column type \"${type}\" you are using is not supported.`, `Column type \"string\" is being used instead.`].join('\\n'));\n      columnTypeWarnedOnce = true;\n    }\n  }\n  if (!columnTypes[type]) {\n    return columnTypes[DEFAULT_GRID_COL_TYPE_KEY];\n  }\n  return columnTypes[type];\n};\nexport const createColumnsState = _ref5 => {\n  let {\n    apiRef,\n    columnsToUpsert,\n    initialState,\n    columnTypes,\n    currentColumnVisibilityModel = gridColumnVisibilityModelSelector(apiRef),\n    shouldRegenColumnVisibilityModelFromColumns,\n    keepOnlyColumnsToUpsert = false\n  } = _ref5;\n  var _apiRef$current$getRo, _apiRef$current$getRo2, _apiRef$current, _apiRef$current$getRo3;\n  const isInsideStateInitializer = !apiRef.current.state.columns;\n  let columnsStateWithoutColumnVisibilityModel;\n  if (isInsideStateInitializer) {\n    columnsStateWithoutColumnVisibilityModel = {\n      all: [],\n      lookup: {}\n    };\n  } else {\n    const currentState = gridColumnsSelector(apiRef.current.state);\n    columnsStateWithoutColumnVisibilityModel = {\n      all: keepOnlyColumnsToUpsert ? [] : [...currentState.all],\n      lookup: _extends({}, currentState.lookup) // Will be cleaned later if keepOnlyColumnsToUpsert=true\n    };\n  }\n\n  let columnsToKeep = {};\n  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {\n    columnsToKeep = Object.keys(columnsStateWithoutColumnVisibilityModel.lookup).reduce((acc, key) => _extends({}, acc, {\n      [key]: false\n    }), {});\n  }\n  const columnsToUpsertLookup = {};\n  columnsToUpsert.forEach(newColumn => {\n    const {\n      field\n    } = newColumn;\n    columnsToUpsertLookup[field] = true;\n    columnsToKeep[field] = true;\n    let existingState = columnsStateWithoutColumnVisibilityModel.lookup[field];\n    if (existingState == null) {\n      // New Column\n      existingState = _extends({}, getGridColDef(columnTypes, newColumn.type), {\n        // TODO v6: Inline `getGridColDef`\n        field,\n        hasBeenResized: false\n      });\n      columnsStateWithoutColumnVisibilityModel.all.push(field);\n    } else if (keepOnlyColumnsToUpsert) {\n      columnsStateWithoutColumnVisibilityModel.all.push(field);\n    }\n    let hasBeenResized = existingState.hasBeenResized;\n    COLUMNS_DIMENSION_PROPERTIES.forEach(key => {\n      if (newColumn[key] !== undefined) {\n        hasBeenResized = true;\n        if (newColumn[key] === -1) {\n          newColumn[key] = Infinity;\n        }\n      }\n    });\n    columnsStateWithoutColumnVisibilityModel.lookup[field] = _extends({}, existingState, {\n      hide: newColumn.hide == null ? false : newColumn.hide\n    }, newColumn, {\n      hasBeenResized\n    });\n  });\n  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {\n    Object.keys(columnsStateWithoutColumnVisibilityModel.lookup).forEach(field => {\n      if (!columnsToKeep[field]) {\n        delete columnsStateWithoutColumnVisibilityModel.lookup[field];\n      }\n    });\n  }\n  const columnsLookupBeforePreProcessing = _extends({}, columnsStateWithoutColumnVisibilityModel.lookup);\n  const columnsStateWithPreProcessing = apiRef.current.unstable_applyPipeProcessors('hydrateColumns', columnsStateWithoutColumnVisibilityModel); // TODO v6: remove the sync between the columns `hide` option and the model.\n\n  let columnVisibilityModel = {};\n  if (shouldRegenColumnVisibilityModelFromColumns) {\n    let hasModelChanged = false;\n    const newColumnVisibilityModel = _extends({}, currentColumnVisibilityModel);\n    if (isInsideStateInitializer) {\n      columnsStateWithPreProcessing.all.forEach(field => {\n        newColumnVisibilityModel[field] = !columnsStateWithoutColumnVisibilityModel.lookup[field].hide;\n      });\n    } else if (keepOnlyColumnsToUpsert) {\n      // At this point, `keepOnlyColumnsToUpsert` has a new meaning: keep the columns\n      // passed via `columnToUpsert` + columns added by the pre-processors. We do the following\n      // cleanup because a given column may have been removed from the `columns` prop but it still\n      // exists in the state.\n      Object.keys(newColumnVisibilityModel).forEach(field => {\n        if (!columnsStateWithPreProcessing.lookup[field]) {\n          delete newColumnVisibilityModel[field];\n          hasModelChanged = true;\n        }\n      });\n    }\n    columnsStateWithPreProcessing.all.forEach(field => {\n      // If neither the `columnsToUpsert` nor the pre-processors updated the column,\n      // Then we don't want to update the visibility status of the column in the model.\n      if (!columnsToUpsertLookup[field] && columnsLookupBeforePreProcessing[field] === columnsStateWithPreProcessing.lookup[field]) {\n        return;\n      } // We always assume that a column not in the model is visible by default. However, there's an\n      // edge case where the column is not in the model but it also doesn't exist in the `columns`\n      // prop, meaning that the column is being added. In that case, we assume that the column was\n      // not visible before for it be added to the model.\n\n      let isVisibleBefore = currentColumnVisibilityModel[field];\n      if (isVisibleBefore === undefined) {\n        if (isInsideStateInitializer) {\n          isVisibleBefore = true;\n        } else {\n          const currentState = gridColumnsSelector(apiRef.current.state);\n          isVisibleBefore = !!currentState.lookup[field];\n        }\n      }\n      const isVisibleAfter = !columnsStateWithPreProcessing.lookup[field].hide;\n      if (isVisibleAfter !== isVisibleBefore) {\n        hasModelChanged = true;\n        newColumnVisibilityModel[field] = isVisibleAfter;\n      }\n    });\n    if (hasModelChanged || isInsideStateInitializer) {\n      columnVisibilityModel = newColumnVisibilityModel;\n    } else {\n      columnVisibilityModel = currentColumnVisibilityModel;\n    }\n  } else {\n    columnVisibilityModel = currentColumnVisibilityModel;\n  }\n  const columnsStateWithPortableColumns = applyInitialState(columnsStateWithPreProcessing, initialState);\n  const columnsState = _extends({}, columnsStateWithPortableColumns, {\n    columnVisibilityModel\n  });\n  return hydrateColumnsWidth(columnsState, (_apiRef$current$getRo = (_apiRef$current$getRo2 = (_apiRef$current = apiRef.current).getRootDimensions) == null ? void 0 : (_apiRef$current$getRo3 = _apiRef$current$getRo2.call(_apiRef$current)) == null ? void 0 : _apiRef$current$getRo3.viewportInnerSize.width) != null ? _apiRef$current$getRo : 0);\n};\nexport const mergeColumnsState = columnsState => state => _extends({}, state, {\n  columns: columnsState\n});\nexport function getFirstNonSpannedColumnToRender(_ref6) {\n  let {\n    firstColumnToRender,\n    apiRef,\n    firstRowToRender,\n    lastRowToRender,\n    visibleRows\n  } = _ref6;\n  let firstNonSpannedColumnToRender = firstColumnToRender;\n  for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n    const row = visibleRows[i];\n    if (row) {\n      const rowId = visibleRows[i].id;\n      const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, firstColumnToRender);\n      if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {\n        firstNonSpannedColumnToRender = cellColSpanInfo.leftVisibleCellIndex;\n      }\n    }\n  }\n  return firstNonSpannedColumnToRender;\n}\nexport function getFirstColumnIndexToRender(_ref7) {\n  let {\n    firstColumnIndex,\n    minColumnIndex,\n    columnBuffer,\n    firstRowToRender,\n    lastRowToRender,\n    apiRef,\n    visibleRows\n  } = _ref7;\n  const initialFirstColumnToRender = Math.max(firstColumnIndex - columnBuffer, minColumnIndex);\n  const firstColumnToRender = getFirstNonSpannedColumnToRender({\n    firstColumnToRender: initialFirstColumnToRender,\n    apiRef,\n    firstRowToRender,\n    lastRowToRender,\n    visibleRows\n  });\n  return firstColumnToRender;\n}","map":{"version":3,"names":["_extends","DEFAULT_GRID_COL_TYPE_KEY","getGridDefaultColumnTypes","gridColumnsSelector","gridColumnVisibilityModelSelector","clamp","COLUMNS_DIMENSION_PROPERTIES","computeColumnTypes","customColumnTypes","arguments","length","undefined","mergedColumnTypes","Object","entries","forEach","_ref","colType","colTypeDef","extendType","computeFlexColumnsWidth","_ref2","initialFreeSpace","totalFlexUnits","flexColumns","flexColumnsLookup","all","frozenFields","freeze","field","value","frozen","push","loopOverFlexItems","violationsLookup","min","max","remainingFreeSpace","flexUnits","totalViolation","computedWidth","flex","i","column","widthPerFlexUnit","minWidth","maxWidth","keys","_ref3","hydrateColumnsWidth","rawState","viewportInnerWidth","columnsLookup","widthAllocatedBeforeFlex","columnField","newColumn","lookup","columnVisibilityModel","width","Math","computedColumnWidths","columnTypeWarnedOnce","applyInitialState","columnsState","initialState","orderedFields","dimensions","columnsWithUpdatedDimensions","orderedFieldsLookup","cleanOrderedFields","newOrderedFields","filter","newColumnLookup","newColDef","hasBeenResized","_ref4","key","Infinity","newColumnsState","getGridColDef","columnTypes","type","process","env","NODE_ENV","console","warn","join","createColumnsState","_ref5","apiRef","columnsToUpsert","currentColumnVisibilityModel","shouldRegenColumnVisibilityModelFromColumns","keepOnlyColumnsToUpsert","_apiRef$current$getRo","_apiRef$current$getRo2","_apiRef$current","_apiRef$current$getRo3","isInsideStateInitializer","current","state","columns","columnsStateWithoutColumnVisibilityModel","currentState","columnsToKeep","reduce","acc","columnsToUpsertLookup","existingState","hide","columnsLookupBeforePreProcessing","columnsStateWithPreProcessing","unstable_applyPipeProcessors","hasModelChanged","newColumnVisibilityModel","isVisibleBefore","isVisibleAfter","columnsStateWithPortableColumns","getRootDimensions","call","viewportInnerSize","mergeColumnsState","getFirstNonSpannedColumnToRender","_ref6","firstColumnToRender","firstRowToRender","lastRowToRender","visibleRows","firstNonSpannedColumnToRender","row","rowId","id","cellColSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","getFirstColumnIndexToRender","_ref7","firstColumnIndex","minColumnIndex","columnBuffer","initialFirstColumnToRender"],"sources":["/Users/mtc/Yara/task2/react-admin/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { DEFAULT_GRID_COL_TYPE_KEY, getGridDefaultColumnTypes } from '../../../colDef';\nimport { gridColumnsSelector, gridColumnVisibilityModelSelector } from './gridColumnsSelector';\nimport { clamp } from '../../../utils/utils';\nexport const COLUMNS_DIMENSION_PROPERTIES = ['maxWidth', 'minWidth', 'width', 'flex'];\nexport const computeColumnTypes = (customColumnTypes = {}) => {\n  const mergedColumnTypes = _extends({}, getGridDefaultColumnTypes());\n\n  Object.entries(customColumnTypes).forEach(([colType, colTypeDef]) => {\n    if (mergedColumnTypes[colType]) {\n      mergedColumnTypes[colType] = _extends({}, mergedColumnTypes[colType], colTypeDef);\n    } else {\n      mergedColumnTypes[colType] = _extends({}, mergedColumnTypes[colTypeDef.extendType || DEFAULT_GRID_COL_TYPE_KEY], colTypeDef);\n    }\n  });\n  return mergedColumnTypes;\n};\n/**\n * Computes width for flex columns.\n * Based on CSS Flexbox specification:\n * https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths\n */\n\nexport function computeFlexColumnsWidth({\n  initialFreeSpace,\n  totalFlexUnits,\n  flexColumns\n}) {\n  const flexColumnsLookup = {\n    all: {},\n    frozenFields: [],\n    freeze: field => {\n      const value = flexColumnsLookup.all[field];\n\n      if (value && value.frozen !== true) {\n        flexColumnsLookup.all[field].frozen = true;\n        flexColumnsLookup.frozenFields.push(field);\n      }\n    }\n  }; // Step 5 of https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths\n\n  function loopOverFlexItems() {\n    // 5a: If all the flex items on the line are frozen, free space has been distributed.\n    if (flexColumnsLookup.frozenFields.length === flexColumns.length) {\n      return;\n    }\n\n    const violationsLookup = {\n      min: {},\n      max: {}\n    };\n    let remainingFreeSpace = initialFreeSpace;\n    let flexUnits = totalFlexUnits;\n    let totalViolation = 0; // 5b: Calculate the remaining free space\n\n    flexColumnsLookup.frozenFields.forEach(field => {\n      remainingFreeSpace -= flexColumnsLookup.all[field].computedWidth;\n      flexUnits -= flexColumnsLookup.all[field].flex;\n    });\n\n    for (let i = 0; i < flexColumns.length; i += 1) {\n      const column = flexColumns[i];\n\n      if (flexColumnsLookup.all[column.field] && flexColumnsLookup.all[column.field].frozen === true) {\n        // eslint-disable-next-line no-continue\n        continue;\n      } // 5c: Distribute remaining free space proportional to the flex factors\n\n\n      const widthPerFlexUnit = remainingFreeSpace / flexUnits;\n      let computedWidth = widthPerFlexUnit * column.flex; // 5d: Fix min/max violations\n\n      if (computedWidth < column.minWidth) {\n        totalViolation += column.minWidth - computedWidth;\n        computedWidth = column.minWidth;\n        violationsLookup.min[column.field] = true;\n      } else if (computedWidth > column.maxWidth) {\n        totalViolation += column.maxWidth - computedWidth;\n        computedWidth = column.maxWidth;\n        violationsLookup.max[column.field] = true;\n      }\n\n      flexColumnsLookup.all[column.field] = {\n        frozen: false,\n        computedWidth,\n        flex: column.flex\n      };\n    } // 5e: Freeze over-flexed items\n\n\n    if (totalViolation < 0) {\n      // Freeze all the items with max violations\n      Object.keys(violationsLookup.max).forEach(field => {\n        flexColumnsLookup.freeze(field);\n      });\n    } else if (totalViolation > 0) {\n      // Freeze all the items with min violations\n      Object.keys(violationsLookup.min).forEach(field => {\n        flexColumnsLookup.freeze(field);\n      });\n    } else {\n      // Freeze all items\n      flexColumns.forEach(({\n        field\n      }) => {\n        flexColumnsLookup.freeze(field);\n      });\n    } // 5f: Return to the start of this loop\n\n\n    loopOverFlexItems();\n  }\n\n  loopOverFlexItems();\n  return flexColumnsLookup.all;\n}\n/**\n * Compute the `computedWidth` (ie: the width the column should have during rendering) based on the `width` / `flex` / `minWidth` / `maxWidth` properties of `GridColDef`.\n * The columns already have been merged with there `type` default values for `minWidth`, `maxWidth` and `width`, thus the `!` for those properties below.\n * TODO: Unit test this function in depth and only keep basic cases for the whole grid testing.\n * TODO: Improve the `GridColDef` typing to reflect the fact that `minWidth` / `maxWidth` and `width` can't be null after the merge with the `type` default values.\n */\n\nexport const hydrateColumnsWidth = (rawState, viewportInnerWidth) => {\n  const columnsLookup = {};\n  let totalFlexUnits = 0;\n  let widthAllocatedBeforeFlex = 0;\n  const flexColumns = []; // For the non-flex columns, compute their width\n  // For the flex columns, compute there minimum width and how much width must be allocated during the flex allocation\n\n  rawState.all.forEach(columnField => {\n    const newColumn = _extends({}, rawState.lookup[columnField]);\n\n    if (rawState.columnVisibilityModel[columnField] === false) {\n      newColumn.computedWidth = 0;\n    } else {\n      let computedWidth;\n\n      if (newColumn.flex && newColumn.flex > 0) {\n        totalFlexUnits += newColumn.flex;\n        computedWidth = 0;\n        flexColumns.push(newColumn);\n      } else {\n        computedWidth = clamp(newColumn.width, newColumn.minWidth, newColumn.maxWidth);\n      }\n\n      widthAllocatedBeforeFlex += computedWidth;\n      newColumn.computedWidth = computedWidth;\n    }\n\n    columnsLookup[columnField] = newColumn;\n  });\n  const initialFreeSpace = Math.max(viewportInnerWidth - widthAllocatedBeforeFlex, 0); // Allocate the remaining space to the flex columns\n\n  if (totalFlexUnits > 0 && viewportInnerWidth > 0) {\n    const computedColumnWidths = computeFlexColumnsWidth({\n      initialFreeSpace,\n      totalFlexUnits,\n      flexColumns\n    });\n    Object.keys(computedColumnWidths).forEach(field => {\n      columnsLookup[field].computedWidth = computedColumnWidths[field].computedWidth;\n    });\n  }\n\n  return _extends({}, rawState, {\n    lookup: columnsLookup\n  });\n};\nlet columnTypeWarnedOnce = false;\n/**\n * Apply the order and the dimensions of the initial state.\n * The columns not registered in `orderedFields` will be placed after the imported columns.\n */\n\nexport const applyInitialState = (columnsState, initialState) => {\n  if (!initialState) {\n    return columnsState;\n  }\n\n  const {\n    orderedFields = [],\n    dimensions = {}\n  } = initialState;\n  const columnsWithUpdatedDimensions = Object.keys(dimensions);\n\n  if (columnsWithUpdatedDimensions.length === 0 && orderedFields.length === 0) {\n    return columnsState;\n  }\n\n  const orderedFieldsLookup = {};\n  const cleanOrderedFields = [];\n\n  for (let i = 0; i < orderedFields.length; i += 1) {\n    const field = orderedFields[i]; // Ignores the fields in the initialState that matches no field on the current column state\n\n    if (columnsState.lookup[field]) {\n      orderedFieldsLookup[field] = true;\n      cleanOrderedFields.push(field);\n    }\n  }\n\n  const newOrderedFields = cleanOrderedFields.length === 0 ? columnsState.all : [...cleanOrderedFields, ...columnsState.all.filter(field => !orderedFieldsLookup[field])];\n\n  const newColumnLookup = _extends({}, columnsState.lookup);\n\n  for (let i = 0; i < columnsWithUpdatedDimensions.length; i += 1) {\n    const field = columnsWithUpdatedDimensions[i];\n\n    const newColDef = _extends({}, newColumnLookup[field], {\n      hasBeenResized: true\n    });\n\n    Object.entries(dimensions[field]).forEach(([key, value]) => {\n      newColDef[key] = value === -1 ? Infinity : value;\n    });\n    newColumnLookup[field] = newColDef;\n  }\n\n  const newColumnsState = {\n    all: newOrderedFields,\n    lookup: newColumnLookup\n  };\n  return newColumnsState;\n};\n/**\n * @deprecated Should have been internal only, you can inline the logic.\n */\n\nexport const getGridColDef = (columnTypes, type) => {\n  if (!type) {\n    return columnTypes[DEFAULT_GRID_COL_TYPE_KEY];\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!columnTypeWarnedOnce && !columnTypes[type]) {\n      console.warn([`MUI: The column type \"${type}\" you are using is not supported.`, `Column type \"string\" is being used instead.`].join('\\n'));\n      columnTypeWarnedOnce = true;\n    }\n  }\n\n  if (!columnTypes[type]) {\n    return columnTypes[DEFAULT_GRID_COL_TYPE_KEY];\n  }\n\n  return columnTypes[type];\n};\nexport const createColumnsState = ({\n  apiRef,\n  columnsToUpsert,\n  initialState,\n  columnTypes,\n  currentColumnVisibilityModel = gridColumnVisibilityModelSelector(apiRef),\n  shouldRegenColumnVisibilityModelFromColumns,\n  keepOnlyColumnsToUpsert = false\n}) => {\n  var _apiRef$current$getRo, _apiRef$current$getRo2, _apiRef$current, _apiRef$current$getRo3;\n\n  const isInsideStateInitializer = !apiRef.current.state.columns;\n  let columnsStateWithoutColumnVisibilityModel;\n\n  if (isInsideStateInitializer) {\n    columnsStateWithoutColumnVisibilityModel = {\n      all: [],\n      lookup: {}\n    };\n  } else {\n    const currentState = gridColumnsSelector(apiRef.current.state);\n    columnsStateWithoutColumnVisibilityModel = {\n      all: keepOnlyColumnsToUpsert ? [] : [...currentState.all],\n      lookup: _extends({}, currentState.lookup) // Will be cleaned later if keepOnlyColumnsToUpsert=true\n\n    };\n  }\n\n  let columnsToKeep = {};\n\n  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {\n    columnsToKeep = Object.keys(columnsStateWithoutColumnVisibilityModel.lookup).reduce((acc, key) => _extends({}, acc, {\n      [key]: false\n    }), {});\n  }\n\n  const columnsToUpsertLookup = {};\n  columnsToUpsert.forEach(newColumn => {\n    const {\n      field\n    } = newColumn;\n    columnsToUpsertLookup[field] = true;\n    columnsToKeep[field] = true;\n    let existingState = columnsStateWithoutColumnVisibilityModel.lookup[field];\n\n    if (existingState == null) {\n      // New Column\n      existingState = _extends({}, getGridColDef(columnTypes, newColumn.type), {\n        // TODO v6: Inline `getGridColDef`\n        field,\n        hasBeenResized: false\n      });\n      columnsStateWithoutColumnVisibilityModel.all.push(field);\n    } else if (keepOnlyColumnsToUpsert) {\n      columnsStateWithoutColumnVisibilityModel.all.push(field);\n    }\n\n    let hasBeenResized = existingState.hasBeenResized;\n    COLUMNS_DIMENSION_PROPERTIES.forEach(key => {\n      if (newColumn[key] !== undefined) {\n        hasBeenResized = true;\n\n        if (newColumn[key] === -1) {\n          newColumn[key] = Infinity;\n        }\n      }\n    });\n    columnsStateWithoutColumnVisibilityModel.lookup[field] = _extends({}, existingState, {\n      hide: newColumn.hide == null ? false : newColumn.hide\n    }, newColumn, {\n      hasBeenResized\n    });\n  });\n\n  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {\n    Object.keys(columnsStateWithoutColumnVisibilityModel.lookup).forEach(field => {\n      if (!columnsToKeep[field]) {\n        delete columnsStateWithoutColumnVisibilityModel.lookup[field];\n      }\n    });\n  }\n\n  const columnsLookupBeforePreProcessing = _extends({}, columnsStateWithoutColumnVisibilityModel.lookup);\n\n  const columnsStateWithPreProcessing = apiRef.current.unstable_applyPipeProcessors('hydrateColumns', columnsStateWithoutColumnVisibilityModel); // TODO v6: remove the sync between the columns `hide` option and the model.\n\n  let columnVisibilityModel = {};\n\n  if (shouldRegenColumnVisibilityModelFromColumns) {\n    let hasModelChanged = false;\n\n    const newColumnVisibilityModel = _extends({}, currentColumnVisibilityModel);\n\n    if (isInsideStateInitializer) {\n      columnsStateWithPreProcessing.all.forEach(field => {\n        newColumnVisibilityModel[field] = !columnsStateWithoutColumnVisibilityModel.lookup[field].hide;\n      });\n    } else if (keepOnlyColumnsToUpsert) {\n      // At this point, `keepOnlyColumnsToUpsert` has a new meaning: keep the columns\n      // passed via `columnToUpsert` + columns added by the pre-processors. We do the following\n      // cleanup because a given column may have been removed from the `columns` prop but it still\n      // exists in the state.\n      Object.keys(newColumnVisibilityModel).forEach(field => {\n        if (!columnsStateWithPreProcessing.lookup[field]) {\n          delete newColumnVisibilityModel[field];\n          hasModelChanged = true;\n        }\n      });\n    }\n\n    columnsStateWithPreProcessing.all.forEach(field => {\n      // If neither the `columnsToUpsert` nor the pre-processors updated the column,\n      // Then we don't want to update the visibility status of the column in the model.\n      if (!columnsToUpsertLookup[field] && columnsLookupBeforePreProcessing[field] === columnsStateWithPreProcessing.lookup[field]) {\n        return;\n      } // We always assume that a column not in the model is visible by default. However, there's an\n      // edge case where the column is not in the model but it also doesn't exist in the `columns`\n      // prop, meaning that the column is being added. In that case, we assume that the column was\n      // not visible before for it be added to the model.\n\n\n      let isVisibleBefore = currentColumnVisibilityModel[field];\n\n      if (isVisibleBefore === undefined) {\n        if (isInsideStateInitializer) {\n          isVisibleBefore = true;\n        } else {\n          const currentState = gridColumnsSelector(apiRef.current.state);\n          isVisibleBefore = !!currentState.lookup[field];\n        }\n      }\n\n      const isVisibleAfter = !columnsStateWithPreProcessing.lookup[field].hide;\n\n      if (isVisibleAfter !== isVisibleBefore) {\n        hasModelChanged = true;\n        newColumnVisibilityModel[field] = isVisibleAfter;\n      }\n    });\n\n    if (hasModelChanged || isInsideStateInitializer) {\n      columnVisibilityModel = newColumnVisibilityModel;\n    } else {\n      columnVisibilityModel = currentColumnVisibilityModel;\n    }\n  } else {\n    columnVisibilityModel = currentColumnVisibilityModel;\n  }\n\n  const columnsStateWithPortableColumns = applyInitialState(columnsStateWithPreProcessing, initialState);\n\n  const columnsState = _extends({}, columnsStateWithPortableColumns, {\n    columnVisibilityModel\n  });\n\n  return hydrateColumnsWidth(columnsState, (_apiRef$current$getRo = (_apiRef$current$getRo2 = (_apiRef$current = apiRef.current).getRootDimensions) == null ? void 0 : (_apiRef$current$getRo3 = _apiRef$current$getRo2.call(_apiRef$current)) == null ? void 0 : _apiRef$current$getRo3.viewportInnerSize.width) != null ? _apiRef$current$getRo : 0);\n};\nexport const mergeColumnsState = columnsState => state => _extends({}, state, {\n  columns: columnsState\n});\nexport function getFirstNonSpannedColumnToRender({\n  firstColumnToRender,\n  apiRef,\n  firstRowToRender,\n  lastRowToRender,\n  visibleRows\n}) {\n  let firstNonSpannedColumnToRender = firstColumnToRender;\n\n  for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n    const row = visibleRows[i];\n\n    if (row) {\n      const rowId = visibleRows[i].id;\n      const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, firstColumnToRender);\n\n      if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {\n        firstNonSpannedColumnToRender = cellColSpanInfo.leftVisibleCellIndex;\n      }\n    }\n  }\n\n  return firstNonSpannedColumnToRender;\n}\nexport function getFirstColumnIndexToRender({\n  firstColumnIndex,\n  minColumnIndex,\n  columnBuffer,\n  firstRowToRender,\n  lastRowToRender,\n  apiRef,\n  visibleRows\n}) {\n  const initialFirstColumnToRender = Math.max(firstColumnIndex - columnBuffer, minColumnIndex);\n  const firstColumnToRender = getFirstNonSpannedColumnToRender({\n    firstColumnToRender: initialFirstColumnToRender,\n    apiRef,\n    firstRowToRender,\n    lastRowToRender,\n    visibleRows\n  });\n  return firstColumnToRender;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}