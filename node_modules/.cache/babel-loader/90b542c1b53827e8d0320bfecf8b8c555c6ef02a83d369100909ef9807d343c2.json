{"ast":null,"code":"import { GridFilterInputSingleSelect } from '../components/panel/filterPanel/GridFilterInputSingleSelect';\nimport { GridFilterInputMultipleSingleSelect } from '../components/panel/filterPanel/GridFilterInputMultipleSingleSelect';\nconst parseObjectValue = value => {\n  if (value == null || typeof value !== 'object') {\n    return value;\n  }\n  return value.value;\n};\nexport const getGridSingleSelectQuickFilterFn = (value, column, apiRef) => {\n  if (!value) {\n    return null;\n  }\n  const {\n    valueOptions,\n    valueFormatter,\n    field\n  } = column;\n  const potentialValues = [parseObjectValue(value).toString()];\n  const iterableColumnValues = typeof valueOptions === 'function' ? valueOptions({\n    field\n  }) : valueOptions || [];\n  if (iterableColumnValues) {\n    iterableColumnValues.forEach(option => {\n      // for each valueOption, check if the formatted value\n      let optionValue;\n      let optionLabel;\n      if (typeof option === 'object') {\n        optionValue = option.value;\n        optionLabel = option.label;\n      } else {\n        optionValue = option;\n        if (valueFormatter) {\n          optionLabel = valueFormatter({\n            value: option,\n            field,\n            api: apiRef.current\n          });\n        } else {\n          optionLabel = option;\n        }\n      }\n      if (optionLabel.slice(0, value.length).toLowerCase() === value.toLowerCase()) {\n        if (!potentialValues.includes(optionValue)) {\n          potentialValues.push(optionValue.toString());\n        }\n      }\n    });\n  }\n  return _ref => {\n    let {\n      value: columnValue\n    } = _ref;\n    return columnValue != null ? potentialValues.includes(parseObjectValue(columnValue).toString()) : false;\n  };\n};\nexport const getGridSingleSelectOperators = () => [{\n  value: 'is',\n  getApplyFilterFn: filterItem => {\n    if (filterItem.value == null || filterItem.value === '') {\n      return null;\n    }\n    return _ref2 => {\n      let {\n        value\n      } = _ref2;\n      return parseObjectValue(value) === parseObjectValue(filterItem.value);\n    };\n  },\n  InputComponent: GridFilterInputSingleSelect\n}, {\n  value: 'not',\n  getApplyFilterFn: filterItem => {\n    if (filterItem.value == null || filterItem.value === '') {\n      return null;\n    }\n    return _ref3 => {\n      let {\n        value\n      } = _ref3;\n      return parseObjectValue(value) !== parseObjectValue(filterItem.value);\n    };\n  },\n  InputComponent: GridFilterInputSingleSelect\n}, {\n  value: 'isAnyOf',\n  getApplyFilterFn: filterItem => {\n    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {\n      return null;\n    }\n    const filterItemValues = filterItem.value.map(parseObjectValue);\n    return _ref4 => {\n      let {\n        value\n      } = _ref4;\n      return filterItemValues.includes(parseObjectValue(value));\n    };\n  },\n  InputComponent: GridFilterInputMultipleSingleSelect\n}];","map":{"version":3,"names":["GridFilterInputSingleSelect","GridFilterInputMultipleSingleSelect","parseObjectValue","value","getGridSingleSelectQuickFilterFn","column","apiRef","valueOptions","valueFormatter","field","potentialValues","toString","iterableColumnValues","forEach","option","optionValue","optionLabel","label","api","current","slice","length","toLowerCase","includes","push","_ref","columnValue","getGridSingleSelectOperators","getApplyFilterFn","filterItem","_ref2","InputComponent","_ref3","Array","isArray","filterItemValues","map","_ref4"],"sources":["/Users/mtc/Yara/task2/react-admin/node_modules/@mui/x-data-grid/colDef/gridSingleSelectOperators.js"],"sourcesContent":["import { GridFilterInputSingleSelect } from '../components/panel/filterPanel/GridFilterInputSingleSelect';\nimport { GridFilterInputMultipleSingleSelect } from '../components/panel/filterPanel/GridFilterInputMultipleSingleSelect';\n\nconst parseObjectValue = value => {\n  if (value == null || typeof value !== 'object') {\n    return value;\n  }\n\n  return value.value;\n};\n\nexport const getGridSingleSelectQuickFilterFn = (value, column, apiRef) => {\n  if (!value) {\n    return null;\n  }\n\n  const {\n    valueOptions,\n    valueFormatter,\n    field\n  } = column;\n  const potentialValues = [parseObjectValue(value).toString()];\n  const iterableColumnValues = typeof valueOptions === 'function' ? valueOptions({\n    field\n  }) : valueOptions || [];\n\n  if (iterableColumnValues) {\n    iterableColumnValues.forEach(option => {\n      // for each valueOption, check if the formatted value\n      let optionValue;\n      let optionLabel;\n\n      if (typeof option === 'object') {\n        optionValue = option.value;\n        optionLabel = option.label;\n      } else {\n        optionValue = option;\n\n        if (valueFormatter) {\n          optionLabel = valueFormatter({\n            value: option,\n            field,\n            api: apiRef.current\n          });\n        } else {\n          optionLabel = option;\n        }\n      }\n\n      if (optionLabel.slice(0, value.length).toLowerCase() === value.toLowerCase()) {\n        if (!potentialValues.includes(optionValue)) {\n          potentialValues.push(optionValue.toString());\n        }\n      }\n    });\n  }\n\n  return ({\n    value: columnValue\n  }) => {\n    return columnValue != null ? potentialValues.includes(parseObjectValue(columnValue).toString()) : false;\n  };\n};\nexport const getGridSingleSelectOperators = () => [{\n  value: 'is',\n  getApplyFilterFn: filterItem => {\n    if (filterItem.value == null || filterItem.value === '') {\n      return null;\n    }\n\n    return ({\n      value\n    }) => parseObjectValue(value) === parseObjectValue(filterItem.value);\n  },\n  InputComponent: GridFilterInputSingleSelect\n}, {\n  value: 'not',\n  getApplyFilterFn: filterItem => {\n    if (filterItem.value == null || filterItem.value === '') {\n      return null;\n    }\n\n    return ({\n      value\n    }) => parseObjectValue(value) !== parseObjectValue(filterItem.value);\n  },\n  InputComponent: GridFilterInputSingleSelect\n}, {\n  value: 'isAnyOf',\n  getApplyFilterFn: filterItem => {\n    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {\n      return null;\n    }\n\n    const filterItemValues = filterItem.value.map(parseObjectValue);\n    return ({\n      value\n    }) => filterItemValues.includes(parseObjectValue(value));\n  },\n  InputComponent: GridFilterInputMultipleSingleSelect\n}];"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}