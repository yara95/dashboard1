{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridVisibleRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityTotalHeaderHeightSelector } from '../density/densitySelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction raf() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      resolve();\n    });\n  });\n}\nfunction getChromeVersion() {\n  const raw = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n  return raw ? parseInt(raw[2], 10) : null;\n}\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]); // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns) => new Promise(resolve => {\n    // TODO remove unused Promise\n    if (!fields && !allColumns) {\n      resolve();\n      return;\n    }\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]); // TODO move outside of this scope and remove React.useCallback\n\n  const buildPrintWindow = React.useCallback(title => {\n    const iframeEl = document.createElement('iframe');\n    iframeEl.style.position = 'absolute';\n    iframeEl.style.width = '0px';\n    iframeEl.style.height = '0px';\n    iframeEl.title = title || document.title;\n    return iframeEl;\n  }, []);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    var _querySelector, _querySelector2;\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false\n    }, options);\n    const printDoc = printWindow.contentDocument;\n    if (!printDoc) {\n      return;\n    }\n    const totalHeaderHeight = gridDensityTotalHeaderHeightSelector(apiRef);\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n    const gridCloneViewport = gridClone.querySelector(`.${gridClasses.virtualScroller}`); // Expand the viewport window to prevent clipping\n\n    gridCloneViewport.style.height = 'auto';\n    gridCloneViewport.style.width = 'auto';\n    gridCloneViewport.parentElement.style.width = 'auto';\n    gridCloneViewport.parentElement.style.height = 'auto'; // Allow to overflow to not hide the border of the last row\n\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n    const chromeVersion = getChromeVersion();\n    if (chromeVersion && chromeVersion >= 108) {\n      // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642\n      gridClone.style.contain = 'size';\n    }\n    const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);\n    const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);\n    columnHeadersInner.style.width = '100%';\n    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n      (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n      (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    } // Expand container height to accommodate all rows\n\n    gridClone.style.height = `${rowsMeta.currentPageTotalHeight + totalHeaderHeight + gridToolbarElementHeight + gridFooterElementHeight}px`; // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari\n    // prevents us to do it\n\n    const container = document.createElement('div');\n    container.appendChild(gridClone);\n    printDoc.body.innerHTML = container.innerHTML;\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n    if (normalizeOptions.copyStyles) {\n      const headStyleElements = doc.current.querySelectorAll(\"style, link[rel='stylesheet']\");\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n          if (sheet) {\n            let styleCSS = ''; // NOTE: for-of is not supported by IE\n\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    } // Trigger print\n\n    if (process.env.NODE_ENV !== 'test') {\n      printWindow.contentWindow.print();\n    }\n  }, [apiRef, doc]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    var _previousGridState$cu, _previousGridState$cu2;\n\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow); // Revert grid to previous state\n\n    apiRef.current.restoreState(previousGridState.current || {});\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n    apiRef.current.unstable_enableVirtualization(); // Clear local state\n\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI: No grid root element available.');\n    }\n    previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n    if (props.pagination) {\n      const visibleRowCount = gridVisibleRowCountSelector(apiRef);\n      apiRef.current.setPageSize(visibleRowCount);\n    }\n    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);\n    apiRef.current.unstable_disableVirtualization();\n    await raf(); // wait for the state changes to take action\n\n    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n    if (process.env.NODE_ENV === 'test') {\n      doc.current.body.appendChild(printWindow); // In test env, run the all pipeline without waiting for loading\n\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => {\n        handlePrintWindowLoad(printWindow, options);\n        const mediaQueryList = printWindow.contentWindow.matchMedia('print');\n        mediaQueryList.addEventListener('change', mql => {\n          const isAfterPrint = mql.matches === false;\n          if (isAfterPrint) {\n            handlePrintWindowAfterPrint(printWindow);\n          }\n        });\n      };\n      doc.current.body.appendChild(printWindow);\n    }\n  }, [props, logger, apiRef, buildPrintWindow, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'GridPrintExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$printOptions;\n    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"names":["_extends","React","ownerDocument","useGridLogger","gridVisibleRowCountSelector","gridColumnDefinitionsSelector","gridColumnVisibilityModelSelector","gridDensityTotalHeaderHeightSelector","gridClasses","useGridApiMethod","gridRowsMetaSelector","getColumnsToExport","useGridRegisterPipeProcessor","GridPrintExportMenuItem","jsx","_jsx","raf","Promise","resolve","requestAnimationFrame","getChromeVersion","raw","navigator","userAgent","match","parseInt","useGridPrintExport","apiRef","props","logger","doc","useRef","previousGridState","previousColumnVisibility","useEffect","current","rootElementRef","updateGridColumnsForPrint","useCallback","fields","allColumns","exportedColumnFields","options","map","column","field","columns","newColumnVisibilityModel","forEach","includes","setColumnVisibilityModel","buildPrintWindow","title","iframeEl","document","createElement","style","position","width","height","handlePrintWindowLoad","printWindow","_querySelector","_querySelector2","normalizeOptions","copyStyles","hideToolbar","hideFooter","printDoc","contentDocument","totalHeaderHeight","rowsMeta","state","gridRootElement","gridClone","cloneNode","gridCloneViewport","querySelector","virtualScroller","parentElement","gridMain","main","overflow","chromeVersion","contain","columnHeaders","columnHeadersInner","gridToolbarElementHeight","toolbarContainer","clientHeight","gridFooterElementHeight","footerContainer","_gridClone$querySelec","remove","_gridClone$querySelec2","currentPageTotalHeight","container","appendChild","body","innerHTML","defaultPageStyle","pageStyle","styleElement","createTextNode","head","bodyClassName","classList","add","split","headStyleElements","querySelectorAll","i","length","node","tagName","newHeadStyleElements","sheet","styleCSS","j","cssRules","cssText","getAttribute","attributes","attr","setAttribute","nodeName","nodeValue","process","env","NODE_ENV","contentWindow","print","handlePrintWindowAfterPrint","_previousGridState$cu","_previousGridState$cu2","removeChild","restoreState","columnVisibilityModel","unstable_enableVirtualization","exportDataAsPrint","debug","Error","exportState","pagination","visibleRowCount","setPageSize","unstable_disableVirtualization","fileName","onload","mediaQueryList","matchMedia","addEventListener","mql","isAfterPrint","matches","printExportApi","addExportMenuButtons","initialValue","_options$printOptions","printOptions","disableToolbarButton","component","componentName"],"sources":["/Users/mtc/Yara/task2/react-admin/node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridVisibleRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityTotalHeaderHeightSelector } from '../density/densitySelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction raf() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      resolve();\n    });\n  });\n}\n\nfunction getChromeVersion() {\n  const raw = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n  return raw ? parseInt(raw[2], 10) : null;\n}\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]); // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns) => new Promise(resolve => {\n    // TODO remove unused Promise\n    if (!fields && !allColumns) {\n      resolve();\n      return;\n    }\n\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]); // TODO move outside of this scope and remove React.useCallback\n\n  const buildPrintWindow = React.useCallback(title => {\n    const iframeEl = document.createElement('iframe');\n    iframeEl.style.position = 'absolute';\n    iframeEl.style.width = '0px';\n    iframeEl.style.height = '0px';\n    iframeEl.title = title || document.title;\n    return iframeEl;\n  }, []);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    var _querySelector, _querySelector2;\n\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false\n    }, options);\n\n    const printDoc = printWindow.contentDocument;\n\n    if (!printDoc) {\n      return;\n    }\n\n    const totalHeaderHeight = gridDensityTotalHeaderHeightSelector(apiRef);\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n    const gridCloneViewport = gridClone.querySelector(`.${gridClasses.virtualScroller}`); // Expand the viewport window to prevent clipping\n\n    gridCloneViewport.style.height = 'auto';\n    gridCloneViewport.style.width = 'auto';\n    gridCloneViewport.parentElement.style.width = 'auto';\n    gridCloneViewport.parentElement.style.height = 'auto'; // Allow to overflow to not hide the border of the last row\n\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n    const chromeVersion = getChromeVersion();\n\n    if (chromeVersion && chromeVersion >= 108) {\n      // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642\n      gridClone.style.contain = 'size';\n    }\n\n    const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);\n    const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);\n    columnHeadersInner.style.width = '100%';\n    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n\n      (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n\n      (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    } // Expand container height to accommodate all rows\n\n\n    gridClone.style.height = `${rowsMeta.currentPageTotalHeight + totalHeaderHeight + gridToolbarElementHeight + gridFooterElementHeight}px`; // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari\n    // prevents us to do it\n\n    const container = document.createElement('div');\n    container.appendChild(gridClone);\n    printDoc.body.innerHTML = container.innerHTML;\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n\n    if (normalizeOptions.copyStyles) {\n      const headStyleElements = doc.current.querySelectorAll(\"style, link[rel='stylesheet']\");\n\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n\n          if (sheet) {\n            let styleCSS = ''; // NOTE: for-of is not supported by IE\n\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    } // Trigger print\n\n\n    if (process.env.NODE_ENV !== 'test') {\n      printWindow.contentWindow.print();\n    }\n  }, [apiRef, doc]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    var _previousGridState$cu, _previousGridState$cu2;\n\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow); // Revert grid to previous state\n\n    apiRef.current.restoreState(previousGridState.current || {});\n\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n\n    apiRef.current.unstable_enableVirtualization(); // Clear local state\n\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI: No grid root element available.');\n    }\n\n    previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n\n    if (props.pagination) {\n      const visibleRowCount = gridVisibleRowCountSelector(apiRef);\n      apiRef.current.setPageSize(visibleRowCount);\n    }\n\n    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);\n    apiRef.current.unstable_disableVirtualization();\n    await raf(); // wait for the state changes to take action\n\n    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n\n    if (process.env.NODE_ENV === 'test') {\n      doc.current.body.appendChild(printWindow); // In test env, run the all pipeline without waiting for loading\n\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => {\n        handlePrintWindowLoad(printWindow, options);\n        const mediaQueryList = printWindow.contentWindow.matchMedia('print');\n        mediaQueryList.addEventListener('change', mql => {\n          const isAfterPrint = mql.matches === false;\n\n          if (isAfterPrint) {\n            handlePrintWindowAfterPrint(printWindow);\n          }\n        });\n      };\n\n      doc.current.body.appendChild(printWindow);\n    }\n  }, [props, logger, apiRef, buildPrintWindow, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'GridPrintExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$printOptions;\n\n    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}