{"ast":null,"code":"import * as React from 'react';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridVisibleSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nfunction enrichPageRowsWithPinnedRows(apiRef, rows) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};\n  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];\n}\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\n\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;\n  const currentPageRows = React.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * TODO replace with apiRef.current.unstable_moveFocusToRelativeCell()\n   */\n\n  const goToCell = React.useCallback(function (colIndex, rowId) {\n    let closestColumnToUse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'left';\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    } // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return currentPageRows[rowIndex].id;\n  }, [currentPageRows]);\n  const handleCellNavigationKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (currentPageRows.length === 0 || !dimensions) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n      case 'Enter':\n        {\n          // TODO v6: Remove Enter case because `cellNavigationKeyDown` is not fired by the new editing API\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n          break;\n        }\n      case ' ':\n        {\n          const field = params.field;\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n          const colDef = params.colDef;\n          if (colDef && colDef.type === 'treeDataGroup') {\n            break;\n          }\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, goToCell, goToHeader, getRowIdFromIndex]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToHeader(colIndexBefore + 1, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToHeader(colIndexBefore - 1, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, goToCell, goToHeader, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (cellParams.cellMode !== GridCellModes.Edit && isNavigationKey(event.key)) {\n      apiRef.current.publishEvent('cellNavigationKeyDown', cellParams, event);\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellNavigationKeyDown', handleCellNavigationKeyDown);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};","map":{"version":3,"names":["React","gridVisibleColumnDefinitionsSelector","useGridLogger","useGridApiEventHandler","gridVisibleSortedRowEntriesSelector","useGridVisibleRows","GRID_CHECKBOX_SELECTION_COL_DEF","gridClasses","GridCellModes","isNavigationKey","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridPinnedRowsSelector","enrichPageRowsWithPinnedRows","apiRef","rows","pinnedRows","top","bottom","useGridKeyboardNavigation","props","logger","initialCurrentPageRows","currentPageRows","useMemo","goToCell","useCallback","colIndex","rowId","closestColumnToUse","arguments","length","undefined","visibleSortedRows","nextCellColSpanInfo","current","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","rowIndexRelativeToAllRows","findIndex","row","id","debug","scrollToIndexes","rowIndex","field","getVisibleColumns","setCellFocus","goToHeader","event","setColumnHeaderFocus","getRowIdFromIndex","handleCellNavigationKeyDown","params","dimensions","getRootDimensions","viewportPageSize","unstable_getViewportPageSize","colIndexBefore","getColumnIndex","rowIndexBefore","firstRowIndexInPage","lastRowIndexInPage","firstColIndex","lastColIndex","shouldPreventDefault","key","shiftKey","colDef","type","Math","min","nextRowIndex","max","ctrlKey","metaKey","preventDefault","handleColumnHeaderKeyDown","headerTitleNode","currentTarget","querySelector","columnHeaderTitleContainerContent","isFromInsideContent","contains","target","toggleColumnMenu","handleCellKeyDown","cellParams","getCellParams","cellMode","Edit","publishEvent"],"sources":["/Users/mtc/Yara/task2/react-admin/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js"],"sourcesContent":["import * as React from 'react';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridVisibleSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\n\nfunction enrichPageRowsWithPinnedRows(apiRef, rows) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};\n  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];\n}\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\n\n\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;\n  const currentPageRows = React.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * TODO replace with apiRef.current.unstable_moveFocusToRelativeCell()\n   */\n\n  const goToCell = React.useCallback((colIndex, rowId, closestColumnToUse = 'left') => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    } // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n\n\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return currentPageRows[rowIndex].id;\n  }, [currentPageRows]);\n  const handleCellNavigationKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (currentPageRows.length === 0 || !dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n      case 'Enter':\n        {\n          // TODO v6: Remove Enter case because `cellNavigationKeyDown` is not fired by the new editing API\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          const field = params.field;\n\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n\n          const colDef = params.colDef;\n\n          if (colDef && colDef.type === 'treeDataGroup') {\n            break;\n          }\n\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, goToCell, goToHeader, getRowIdFromIndex]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToHeader(colIndexBefore + 1, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToHeader(colIndexBefore - 1, event);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, goToCell, goToHeader, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (cellParams.cellMode !== GridCellModes.Edit && isNavigationKey(event.key)) {\n      apiRef.current.publishEvent('cellNavigationKeyDown', cellParams, event);\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellNavigationKeyDown', handleCellNavigationKeyDown);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}