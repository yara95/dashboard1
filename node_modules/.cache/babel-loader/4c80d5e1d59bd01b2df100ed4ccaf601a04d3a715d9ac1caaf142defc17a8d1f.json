{"ast":null,"code":"import { memo as e, useMemo as r, useState as i, useCallback as n, createElement as t, Fragment as o, forwardRef as a, useRef as s, useEffect as l } from \"react\";\nimport { useTheme as u, lineCurvePropType as d, blendModePropType as c, motionPropTypes as f, defsPropTypes as p, curveFromProp as h, useValueFormatter as y, useMotionConfig as b, useAnimatedPath as g, getLabelGenerator as m, DotsItem as v, withContainer as x, useDimensions as R, CartesianMarkers as q, bindDefs as O, SvgWrapper as S, ResponsiveWrapper as C, getRelativeCursor as T, isCursorInRect as M } from \"@nivo/core\";\nimport { ordinalColorsPropType as w, useOrdinalColorScale as B, useInheritedColor as k } from \"@nivo/colors\";\nimport { axisPropType as W, Grid as G, Axes as L, renderGridLinesToCanvas as P, renderAxesToCanvas as j } from \"@nivo/axes\";\nimport { LegendPropShape as F, BoxLegendSvg as V, renderLegendToCanvas as E } from \"@nivo/legends\";\nimport { BasicTooltip as Y, TableTooltip as D, Chip as X, useTooltip as z, Crosshair as A } from \"@nivo/tooltip\";\nimport { line as H, area as I } from \"d3-shape\";\nimport { computeXYScalesForSeries as J } from \"@nivo/scales\";\nimport K from \"prop-types\";\nimport { jsx as N, jsxs as Q } from \"react/jsx-runtime\";\nimport { useSpring as U, animated as Z } from \"@react-spring/web\";\nimport { Mesh as $, useVoronoiMesh as _, renderVoronoiToCanvas as ee, renderVoronoiCellToCanvas as re } from \"@nivo/voronoi\";\nfunction ie() {\n  return ie = Object.assign || function (e) {\n    for (var r = 1; r < arguments.length; r++) {\n      var i = arguments[r];\n      for (var n in i) Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n]);\n    }\n    return e;\n  }, ie.apply(this, arguments);\n}\nvar ne = function (e) {\n  var r = e.point;\n  return N(Y, {\n    id: Q(\"span\", {\n      children: [\"x: \", N(\"strong\", {\n        children: r.data.xFormatted\n      }), \", y:\", \" \", N(\"strong\", {\n        children: r.data.yFormatted\n      })]\n    }),\n    enableChip: !0,\n    color: r.serieColor\n  });\n};\nne.propTypes = {\n  point: K.object.isRequired\n};\nvar te = e(ne),\n  oe = function (e) {\n    var r = e.slice,\n      i = e.axis,\n      n = u(),\n      t = \"x\" === i ? \"y\" : \"x\";\n    return N(D, {\n      rows: r.points.map(function (e) {\n        return [N(X, {\n          color: e.serieColor,\n          style: n.tooltip.chip\n        }, \"chip\"), e.serieId, N(\"span\", {\n          style: n.tooltip.tableCellValue,\n          children: e.data[t + \"Formatted\"]\n        }, \"value\")];\n      })\n    });\n  };\noe.propTypes = {\n  slice: K.object.isRequired,\n  axis: K.oneOf([\"x\", \"y\"]).isRequired\n};\nvar ae = e(oe),\n  se = {\n    data: K.arrayOf(K.shape({\n      id: K.oneOfType([K.string, K.number]).isRequired,\n      data: K.arrayOf(K.shape({\n        x: K.oneOfType([K.number, K.string, K.instanceOf(Date)]),\n        y: K.oneOfType([K.number, K.string, K.instanceOf(Date)])\n      })).isRequired\n    })).isRequired,\n    xScale: K.object.isRequired,\n    xFormat: K.oneOfType([K.func, K.string]),\n    yScale: K.object.isRequired,\n    yFormat: K.oneOfType([K.func, K.string]),\n    layers: K.arrayOf(K.oneOfType([K.oneOf([\"grid\", \"markers\", \"axes\", \"areas\", \"crosshair\", \"lines\", \"slices\", \"points\", \"mesh\", \"legends\"]), K.func])).isRequired,\n    curve: d.isRequired,\n    axisTop: W,\n    axisRight: W,\n    axisBottom: W,\n    axisLeft: W,\n    enableGridX: K.bool.isRequired,\n    enableGridY: K.bool.isRequired,\n    gridXValues: K.oneOfType([K.number, K.arrayOf(K.oneOfType([K.number, K.string, K.instanceOf(Date)]))]),\n    gridYValues: K.oneOfType([K.number, K.arrayOf(K.oneOfType([K.number, K.string, K.instanceOf(Date)]))]),\n    enablePoints: K.bool.isRequired,\n    pointSymbol: K.func,\n    pointSize: K.number.isRequired,\n    pointColor: K.any.isRequired,\n    pointBorderWidth: K.number.isRequired,\n    pointBorderColor: K.any.isRequired,\n    enablePointLabel: K.bool.isRequired,\n    pointLabel: K.oneOfType([K.string, K.func]).isRequired,\n    markers: K.arrayOf(K.shape({\n      axis: K.oneOf([\"x\", \"y\"]).isRequired,\n      value: K.oneOfType([K.number, K.string, K.instanceOf(Date)]).isRequired,\n      style: K.object\n    })),\n    colors: w.isRequired,\n    enableArea: K.bool.isRequired,\n    areaOpacity: K.number.isRequired,\n    areaBlendMode: c.isRequired,\n    areaBaselineValue: K.oneOfType([K.number, K.string, K.instanceOf(Date)]).isRequired,\n    lineWidth: K.number.isRequired,\n    legends: K.arrayOf(K.shape(F)).isRequired,\n    isInteractive: K.bool.isRequired,\n    debugMesh: K.bool.isRequired,\n    tooltip: K.oneOfType([K.func, K.object]).isRequired,\n    enableSlices: K.oneOf([\"x\", \"y\", !1]).isRequired,\n    debugSlices: K.bool.isRequired,\n    sliceTooltip: K.oneOfType([K.func, K.object]).isRequired,\n    enableCrosshair: K.bool.isRequired,\n    crosshairType: K.string.isRequired\n  },\n  le = ie({}, se, {\n    enablePointLabel: K.bool.isRequired,\n    role: K.string.isRequired,\n    useMesh: K.bool.isRequired\n  }, f, p),\n  ue = ie({\n    pixelRatio: K.number.isRequired\n  }, se),\n  de = {\n    curve: \"linear\",\n    xScale: {\n      type: \"point\"\n    },\n    yScale: {\n      type: \"linear\",\n      min: 0,\n      max: \"auto\"\n    },\n    layers: [\"grid\", \"markers\", \"axes\", \"areas\", \"crosshair\", \"lines\", \"points\", \"slices\", \"mesh\", \"legends\"],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: !0,\n    enableGridY: !0,\n    enablePoints: !0,\n    pointSize: 6,\n    pointColor: {\n      from: \"color\"\n    },\n    pointBorderWidth: 0,\n    pointBorderColor: {\n      theme: \"background\"\n    },\n    enablePointLabel: !1,\n    pointLabel: \"yFormatted\",\n    colors: {\n      scheme: \"nivo\"\n    },\n    enableArea: !1,\n    areaBaselineValue: 0,\n    areaOpacity: .2,\n    areaBlendMode: \"normal\",\n    lineWidth: 2,\n    legends: [],\n    isInteractive: !0,\n    tooltip: te,\n    enableSlices: !1,\n    debugSlices: !1,\n    sliceTooltip: ae,\n    debugMesh: !1,\n    enableCrosshair: !0,\n    crosshairType: \"bottom-left\"\n  },\n  ce = ie({}, de, {\n    enablePointLabel: !1,\n    useMesh: !1,\n    animate: !0,\n    motionConfig: \"gentle\",\n    defs: [],\n    fill: [],\n    role: \"img\"\n  }),\n  fe = ie({}, de, {\n    pixelRatio: \"undefined\" != typeof window && window.devicePixelRatio || 1\n  }),\n  pe = function (e) {\n    var i = e.curve;\n    return r(function () {\n      return H().defined(function (e) {\n        return null !== e.x && null !== e.y;\n      }).x(function (e) {\n        return e.x;\n      }).y(function (e) {\n        return e.y;\n      }).curve(h(i));\n    }, [i]);\n  },\n  he = function (e) {\n    var i = e.curve,\n      n = e.yScale,\n      t = e.areaBaselineValue;\n    return r(function () {\n      return I().defined(function (e) {\n        return null !== e.x && null !== e.y;\n      }).x(function (e) {\n        return e.x;\n      }).y1(function (e) {\n        return e.y;\n      }).curve(h(i)).y0(n(t));\n    }, [i, n, t]);\n  },\n  ye = function (e) {\n    var i = e.enableSlices,\n      n = e.points,\n      t = e.width,\n      o = e.height;\n    return r(function () {\n      if (!1 === i) return [];\n      if (\"x\" === i) {\n        var e = new Map();\n        return n.forEach(function (r) {\n          null !== r.data.x && null !== r.data.y && (e.has(r.x) ? e.get(r.x).push(r) : e.set(r.x, [r]));\n        }), Array.from(e.entries()).sort(function (e, r) {\n          return e[0] - r[0];\n        }).map(function (e, r, i) {\n          var n,\n            a = e[0],\n            s = e[1],\n            l = i[r - 1],\n            u = i[r + 1];\n          return {\n            id: a,\n            x0: n = l ? a - (a - l[0]) / 2 : a,\n            x: a,\n            y0: 0,\n            y: 0,\n            width: u ? a - n + (u[0] - a) / 2 : t - n,\n            height: o,\n            points: s.reverse()\n          };\n        });\n      }\n      if (\"y\" === i) {\n        var r = new Map();\n        return n.forEach(function (e) {\n          null !== e.data.x && null !== e.data.y && (r.has(e.y) ? r.get(e.y).push(e) : r.set(e.y, [e]));\n        }), Array.from(r.entries()).sort(function (e, r) {\n          return e[0] - r[0];\n        }).map(function (e, r, i) {\n          var n,\n            a,\n            s = e[0],\n            l = e[1],\n            u = i[r - 1],\n            d = i[r + 1];\n          return n = u ? s - (s - u[0]) / 2 : s, a = d ? s - n + (d[0] - s) / 2 : o - n, {\n            id: s,\n            x0: 0,\n            x: 0,\n            y0: n,\n            y: s,\n            width: t,\n            height: a,\n            points: l.reverse()\n          };\n        });\n      }\n    }, [i, n]);\n  },\n  be = function (e) {\n    var t = e.data,\n      o = e.xScale,\n      a = void 0 === o ? ce.xScale : o,\n      s = e.xFormat,\n      l = e.yScale,\n      d = void 0 === l ? ce.yScale : l,\n      c = e.yFormat,\n      f = e.width,\n      p = e.height,\n      h = e.colors,\n      b = void 0 === h ? ce.colors : h,\n      g = e.curve,\n      m = void 0 === g ? ce.curve : g,\n      v = e.areaBaselineValue,\n      x = void 0 === v ? ce.areaBaselineValue : v,\n      R = e.pointColor,\n      q = void 0 === R ? ce.pointColor : R,\n      O = e.pointBorderColor,\n      S = void 0 === O ? ce.pointBorderColor : O,\n      C = e.enableSlices,\n      T = void 0 === C ? ce.enableSlicesTooltip : C,\n      M = y(s),\n      w = y(c),\n      W = B(b, \"id\"),\n      G = u(),\n      L = k(q, G),\n      P = k(S, G),\n      j = i([]),\n      F = j[0],\n      V = j[1],\n      E = r(function () {\n        return J(t.filter(function (e) {\n          return -1 === F.indexOf(e.id);\n        }), a, d, f, p);\n      }, [t, F, a, d, f, p]),\n      Y = E.xScale,\n      D = E.yScale,\n      X = E.series,\n      z = r(function () {\n        var e = t.map(function (e) {\n            return {\n              id: e.id,\n              label: e.id,\n              color: W(e)\n            };\n          }),\n          r = e.map(function (e) {\n            return ie({}, X.find(function (r) {\n              return r.id === e.id;\n            }), {\n              color: e.color\n            });\n          }).filter(function (e) {\n            return Boolean(e.id);\n          });\n        return {\n          legendData: e.map(function (e) {\n            return ie({}, e, {\n              hidden: !r.find(function (r) {\n                return r.id === e.id;\n              })\n            });\n          }).reverse(),\n          series: r\n        };\n      }, [t, X, W]),\n      A = z.legendData,\n      H = z.series,\n      I = n(function (e) {\n        V(function (r) {\n          return r.indexOf(e) > -1 ? r.filter(function (r) {\n            return r !== e;\n          }) : [].concat(r, [e]);\n        });\n      }, []),\n      K = function (e) {\n        var i = e.series,\n          n = e.getPointColor,\n          t = e.getPointBorderColor,\n          o = e.formatX,\n          a = e.formatY;\n        return r(function () {\n          return i.reduce(function (e, r) {\n            return [].concat(e, r.data.filter(function (e) {\n              return null !== e.position.x && null !== e.position.y;\n            }).map(function (i, s) {\n              var l = {\n                id: r.id + \".\" + s,\n                index: e.length + s,\n                serieId: r.id,\n                serieColor: r.color,\n                x: i.position.x,\n                y: i.position.y\n              };\n              return l.color = n(r), l.borderColor = t(l), l.data = ie({}, i.data, {\n                xFormatted: o(i.data.x),\n                yFormatted: a(i.data.y)\n              }), l;\n            }));\n          }, []);\n        }, [i, n, t, o, a]);\n      }({\n        series: H,\n        getPointColor: L,\n        getPointBorderColor: P,\n        formatX: M,\n        formatY: w\n      }),\n      N = ye({\n        enableSlices: T,\n        points: K,\n        width: f,\n        height: p\n      });\n    return {\n      legendData: A,\n      toggleSerie: I,\n      lineGenerator: pe({\n        curve: m\n      }),\n      areaGenerator: he({\n        curve: m,\n        yScale: D,\n        areaBaselineValue: x\n      }),\n      getColor: W,\n      series: H,\n      xScale: Y,\n      yScale: D,\n      slices: N,\n      points: K\n    };\n  },\n  ge = function (e) {\n    var r = e.areaBlendMode,\n      i = e.areaOpacity,\n      n = e.color,\n      t = e.fill,\n      o = e.path,\n      a = b(),\n      s = a.animate,\n      l = a.config,\n      u = g(o),\n      d = U({\n        color: n,\n        config: l,\n        immediate: !s\n      });\n    return N(Z.path, {\n      d: u,\n      fill: t || d.color,\n      fillOpacity: i,\n      strokeWidth: 0,\n      style: {\n        mixBlendMode: r\n      }\n    });\n  };\nge.propTypes = {\n  areaBlendMode: c.isRequired,\n  areaOpacity: K.number.isRequired,\n  color: K.string,\n  fill: K.string,\n  path: K.string.isRequired\n};\nvar me = function (e) {\n  var r = e.areaGenerator,\n    i = e.areaOpacity,\n    n = e.areaBlendMode,\n    t = e.lines.slice(0).reverse();\n  return N(\"g\", {\n    children: t.map(function (e) {\n      return N(ge, ie({\n        path: r(e.data.map(function (e) {\n          return e.position;\n        }))\n      }, ie({\n        areaOpacity: i,\n        areaBlendMode: n\n      }, e)), e.id);\n    })\n  });\n};\nme.propTypes = {\n  areaGenerator: K.func.isRequired,\n  areaOpacity: K.number.isRequired,\n  areaBlendMode: c.isRequired,\n  lines: K.arrayOf(K.object).isRequired\n};\nvar ve = e(me),\n  xe = function (e) {\n    var i = e.lineGenerator,\n      n = e.points,\n      t = e.color,\n      o = e.thickness,\n      a = r(function () {\n        return i(n);\n      }, [i, n]),\n      s = g(a);\n    return N(Z.path, {\n      d: s,\n      fill: \"none\",\n      strokeWidth: o,\n      stroke: t\n    });\n  };\nxe.propTypes = {\n  points: K.arrayOf(K.shape({\n    x: K.oneOfType([K.string, K.number]),\n    y: K.oneOfType([K.string, K.number])\n  })),\n  lineGenerator: K.func.isRequired,\n  color: K.string.isRequired,\n  thickness: K.number.isRequired\n};\nvar Re = e(xe),\n  qe = function (e) {\n    var r = e.lines,\n      i = e.lineGenerator,\n      n = e.lineWidth;\n    return r.slice(0).reverse().map(function (e) {\n      var r = e.id,\n        t = e.data,\n        o = e.color;\n      return N(Re, {\n        id: r,\n        points: t.map(function (e) {\n          return e.position;\n        }),\n        lineGenerator: i,\n        color: o,\n        thickness: n\n      }, r);\n    });\n  };\nqe.propTypes = {\n  lines: K.arrayOf(K.shape({\n    id: K.oneOfType([K.string, K.number]).isRequired,\n    color: K.string.isRequired,\n    data: K.arrayOf(K.shape({\n      data: K.shape({\n        x: K.oneOfType([K.string, K.number, K.instanceOf(Date)]),\n        y: K.oneOfType([K.string, K.number, K.instanceOf(Date)])\n      }).isRequired,\n      position: K.shape({\n        x: K.number,\n        y: K.number\n      }).isRequired\n    })).isRequired\n  })).isRequired,\n  lineWidth: K.number.isRequired,\n  lineGenerator: K.func.isRequired\n};\nvar Oe = e(qe),\n  Se = function (e) {\n    var r = e.slice,\n      i = e.axis,\n      o = e.debug,\n      a = e.tooltip,\n      s = e.isCurrent,\n      l = e.setCurrent,\n      u = z(),\n      d = u.showTooltipFromEvent,\n      c = u.hideTooltip,\n      f = n(function (e) {\n        d(t(a, {\n          slice: r,\n          axis: i\n        }), e, \"right\"), l(r);\n      }, [d, a, r]),\n      p = n(function (e) {\n        d(t(a, {\n          slice: r,\n          axis: i\n        }), e, \"right\");\n      }, [d, a, r]),\n      h = n(function () {\n        c(), l(null);\n      }, [c]);\n    return N(\"rect\", {\n      x: r.x0,\n      y: r.y0,\n      width: r.width,\n      height: r.height,\n      stroke: \"red\",\n      strokeWidth: o ? 1 : 0,\n      strokeOpacity: .75,\n      fill: \"red\",\n      fillOpacity: s && o ? .35 : 0,\n      onMouseEnter: f,\n      onMouseMove: p,\n      onMouseLeave: h\n    });\n  };\nSe.propTypes = {\n  slice: K.object.isRequired,\n  axis: K.oneOf([\"x\", \"y\"]).isRequired,\n  debug: K.bool.isRequired,\n  height: K.number.isRequired,\n  tooltip: K.oneOfType([K.func, K.object]),\n  isCurrent: K.bool.isRequired,\n  setCurrent: K.func.isRequired\n};\nvar Ce = e(Se),\n  Te = function (e) {\n    var r = e.slices,\n      i = e.axis,\n      n = e.debug,\n      t = e.height,\n      o = e.tooltip,\n      a = e.current,\n      s = e.setCurrent;\n    return r.map(function (e) {\n      return N(Ce, {\n        slice: e,\n        axis: i,\n        debug: n,\n        height: t,\n        tooltip: o,\n        setCurrent: s,\n        isCurrent: null !== a && a.id === e.id\n      }, e.id);\n    });\n  };\nTe.propTypes = {\n  slices: K.arrayOf(K.shape({\n    id: K.oneOfType([K.number, K.string, K.instanceOf(Date)]).isRequired,\n    x: K.number.isRequired,\n    y: K.number.isRequired,\n    points: K.arrayOf(K.object).isRequired\n  })).isRequired,\n  axis: K.oneOf([\"x\", \"y\"]).isRequired,\n  debug: K.bool.isRequired,\n  height: K.number.isRequired,\n  tooltip: K.oneOfType([K.func, K.object]).isRequired,\n  current: K.object,\n  setCurrent: K.func.isRequired\n};\nvar Me = e(Te),\n  we = function (e) {\n    var r = e.points,\n      i = e.symbol,\n      n = e.size,\n      t = e.borderWidth,\n      o = e.enableLabel,\n      a = e.label,\n      s = e.labelYOffset,\n      l = u(),\n      d = m(a),\n      c = r.slice(0).reverse().map(function (e) {\n        return {\n          id: e.id,\n          x: e.x,\n          y: e.y,\n          datum: e.data,\n          fill: e.color,\n          stroke: e.borderColor,\n          label: o ? d(e.data) : null\n        };\n      });\n    return N(\"g\", {\n      children: c.map(function (e) {\n        return N(v, {\n          x: e.x,\n          y: e.y,\n          datum: e.datum,\n          symbol: i,\n          size: n,\n          color: e.fill,\n          borderWidth: t,\n          borderColor: e.stroke,\n          label: e.label,\n          labelYOffset: s,\n          theme: l\n        }, e.id);\n      })\n    });\n  };\nwe.propTypes = {\n  points: K.arrayOf(K.object),\n  symbol: K.func,\n  size: K.number.isRequired,\n  color: K.func.isRequired,\n  borderWidth: K.number.isRequired,\n  borderColor: K.func.isRequired,\n  enableLabel: K.bool.isRequired,\n  label: K.oneOfType([K.string, K.func]).isRequired,\n  labelYOffset: K.number\n};\nvar Be = e(we),\n  ke = function (e) {\n    var r = e.points,\n      i = e.width,\n      o = e.height,\n      a = e.margin,\n      s = e.setCurrent,\n      l = e.onMouseEnter,\n      u = e.onMouseMove,\n      d = e.onMouseLeave,\n      c = e.onClick,\n      f = e.tooltip,\n      p = e.debug,\n      h = z(),\n      y = h.showTooltipAt,\n      b = h.hideTooltip,\n      g = n(function (e, r) {\n        y(t(f, {\n          point: e\n        }), [e.x + a.left, e.y + a.top], \"top\"), s(e), l && l(e, r);\n      }, [s, y, f, l, a]),\n      m = n(function (e, r) {\n        y(t(f, {\n          point: e\n        }), [e.x + a.left, e.y + a.top], \"top\"), s(e), u && u(e, r);\n      }, [s, y, f, u]),\n      v = n(function (e, r) {\n        b(), s(null), d && d(e, r);\n      }, [b, s, d]),\n      x = n(function (e, r) {\n        c && c(e, r);\n      }, [c]);\n    return N($, {\n      nodes: r,\n      width: i,\n      height: o,\n      onMouseEnter: g,\n      onMouseMove: m,\n      onMouseLeave: v,\n      onClick: x,\n      debug: p\n    });\n  };\nke.propTypes = {\n  points: K.arrayOf(K.object).isRequired,\n  width: K.number.isRequired,\n  height: K.number.isRequired,\n  margin: K.object.isRequired,\n  setCurrent: K.func.isRequired,\n  onMouseEnter: K.func,\n  onMouseMove: K.func,\n  onMouseLeave: K.func,\n  onClick: K.func,\n  tooltip: K.oneOfType([K.func, K.object]).isRequired,\n  debug: K.bool.isRequired\n};\nvar We = e(ke),\n  Ge = function (e) {\n    var r = e.data,\n      n = e.xScale,\n      t = e.xFormat,\n      a = e.yScale,\n      s = e.yFormat,\n      l = e.layers,\n      d = e.curve,\n      c = e.areaBaselineValue,\n      f = e.colors,\n      p = e.margin,\n      h = e.width,\n      y = e.height,\n      b = e.axisTop,\n      g = e.axisRight,\n      m = e.axisBottom,\n      v = e.axisLeft,\n      x = e.enableGridX,\n      C = e.enableGridY,\n      T = e.gridXValues,\n      M = e.gridYValues,\n      w = e.lineWidth,\n      B = e.enableArea,\n      W = e.areaOpacity,\n      P = e.areaBlendMode,\n      j = e.enablePoints,\n      F = e.pointSymbol,\n      E = e.pointSize,\n      Y = e.pointColor,\n      D = e.pointBorderWidth,\n      X = e.pointBorderColor,\n      z = e.enablePointLabel,\n      H = e.pointLabel,\n      I = e.pointLabelYOffset,\n      J = e.defs,\n      K = e.fill,\n      Q = e.markers,\n      U = e.legends,\n      Z = e.isInteractive,\n      $ = e.useMesh,\n      _ = e.debugMesh,\n      ee = e.onMouseEnter,\n      re = e.onMouseMove,\n      ne = e.onMouseLeave,\n      te = e.onClick,\n      oe = e.tooltip,\n      ae = e.enableSlices,\n      se = e.debugSlices,\n      le = e.sliceTooltip,\n      ue = e.enableCrosshair,\n      de = e.crosshairType,\n      ce = e.role,\n      fe = R(h, y, p),\n      pe = fe.margin,\n      he = fe.innerWidth,\n      ye = fe.innerHeight,\n      ge = fe.outerWidth,\n      me = fe.outerHeight,\n      xe = be({\n        data: r,\n        xScale: n,\n        xFormat: t,\n        yScale: a,\n        yFormat: s,\n        width: he,\n        height: ye,\n        colors: f,\n        curve: d,\n        areaBaselineValue: c,\n        pointColor: Y,\n        pointBorderColor: X,\n        enableSlices: ae\n      }),\n      Re = xe.legendData,\n      qe = xe.toggleSerie,\n      Se = xe.lineGenerator,\n      Ce = xe.areaGenerator,\n      Te = xe.series,\n      we = xe.xScale,\n      ke = xe.yScale,\n      Ge = xe.slices,\n      Le = xe.points,\n      Pe = u(),\n      je = k(Y, Pe),\n      Fe = k(X, Pe),\n      Ve = i(null),\n      Ee = Ve[0],\n      Ye = Ve[1],\n      De = i(null),\n      Xe = De[0],\n      ze = De[1],\n      Ae = {\n        grid: N(G, {\n          theme: Pe,\n          width: he,\n          height: ye,\n          xScale: x ? we : null,\n          yScale: C ? ke : null,\n          xValues: T,\n          yValues: M\n        }, \"grid\"),\n        markers: N(q, {\n          markers: Q,\n          width: he,\n          height: ye,\n          xScale: we,\n          yScale: ke,\n          theme: Pe\n        }, \"markers\"),\n        axes: N(L, {\n          xScale: we,\n          yScale: ke,\n          width: he,\n          height: ye,\n          theme: Pe,\n          top: b,\n          right: g,\n          bottom: m,\n          left: v\n        }, \"axes\"),\n        areas: null,\n        lines: N(Oe, {\n          lines: Te,\n          lineGenerator: Se,\n          lineWidth: w\n        }, \"lines\"),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: U.map(function (e, r) {\n          return N(V, ie({}, e, {\n            containerWidth: he,\n            containerHeight: ye,\n            data: e.data || Re,\n            theme: Pe,\n            toggleSerie: e.toggleSerie ? qe : void 0\n          }), \"legend.\" + r);\n        })\n      },\n      He = O(J, Te, K);\n    return B && (Ae.areas = N(ve, {\n      areaGenerator: Ce,\n      areaOpacity: W,\n      areaBlendMode: P,\n      lines: Te\n    }, \"areas\")), Z && !1 !== ae && (Ae.slices = N(Me, {\n      slices: Ge,\n      axis: ae,\n      debug: se,\n      height: ye,\n      tooltip: le,\n      current: Xe,\n      setCurrent: ze\n    }, \"slices\")), j && (Ae.points = N(Be, {\n      points: Le,\n      symbol: F,\n      size: E,\n      color: je,\n      borderWidth: D,\n      borderColor: Fe,\n      enableLabel: z,\n      label: H,\n      labelYOffset: I\n    }, \"points\")), Z && ue && (null !== Ee && (Ae.crosshair = N(A, {\n      width: he,\n      height: ye,\n      x: Ee.x,\n      y: Ee.y,\n      type: de\n    }, \"crosshair\")), null !== Xe && (Ae.crosshair = N(A, {\n      width: he,\n      height: ye,\n      x: Xe.x,\n      y: Xe.y,\n      type: ae\n    }, \"crosshair\"))), Z && $ && !1 === ae && (Ae.mesh = N(We, {\n      points: Le,\n      width: he,\n      height: ye,\n      margin: pe,\n      current: Ee,\n      setCurrent: Ye,\n      onMouseEnter: ee,\n      onMouseMove: re,\n      onMouseLeave: ne,\n      onClick: te,\n      tooltip: oe,\n      debug: _\n    }, \"mesh\")), N(S, {\n      defs: He,\n      width: ge,\n      height: me,\n      margin: pe,\n      role: ce,\n      children: l.map(function (r, i) {\n        return \"function\" == typeof r ? N(o, {\n          children: r(ie({}, e, {\n            innerWidth: he,\n            innerHeight: ye,\n            series: Te,\n            slices: Ge,\n            points: Le,\n            xScale: we,\n            yScale: ke,\n            lineGenerator: Se,\n            areaGenerator: Ce,\n            currentPoint: Ee,\n            setCurrentPoint: Ye,\n            currentSlice: Xe,\n            setCurrentSlice: ze\n          }))\n        }, i) : Ae[r];\n      })\n    });\n  };\nGe.propTypes = le, Ge.defaultProps = ce;\nvar Le = x(Ge),\n  Pe = function (e) {\n    return N(C, {\n      children: function (r) {\n        var i = r.width,\n          n = r.height;\n        return N(Le, ie({\n          width: i,\n          height: n\n        }, e));\n      }\n    });\n  },\n  je = function (e) {\n    var r = e.width,\n      o = e.height,\n      a = e.margin,\n      d = e.pixelRatio,\n      c = e.data,\n      f = e.xScale,\n      p = e.xFormat,\n      h = e.yScale,\n      y = e.yFormat,\n      b = e.curve,\n      g = e.layers,\n      m = e.colors,\n      v = e.lineWidth,\n      x = e.enableArea,\n      q = e.areaBaselineValue,\n      O = e.areaOpacity,\n      S = e.enablePoints,\n      C = e.pointSize,\n      w = e.pointColor,\n      B = e.pointBorderWidth,\n      k = e.pointBorderColor,\n      W = e.enableGridX,\n      G = e.gridXValues,\n      L = e.enableGridY,\n      F = e.gridYValues,\n      V = e.axisTop,\n      Y = e.axisRight,\n      D = e.axisBottom,\n      X = e.axisLeft,\n      A = e.legends,\n      H = e.isInteractive,\n      I = e.debugMesh,\n      J = e.onMouseLeave,\n      K = e.onClick,\n      Q = e.tooltip,\n      U = e.canvasRef,\n      Z = s(null),\n      $ = R(r, o, a),\n      ne = $.margin,\n      te = $.innerWidth,\n      oe = $.innerHeight,\n      ae = $.outerWidth,\n      se = $.outerHeight,\n      le = u(),\n      ue = i(null),\n      de = ue[0],\n      ce = ue[1],\n      fe = be({\n        data: c,\n        xScale: f,\n        xFormat: p,\n        yScale: h,\n        yFormat: y,\n        width: te,\n        height: oe,\n        colors: m,\n        curve: b,\n        areaBaselineValue: q,\n        pointColor: w,\n        pointBorderColor: k\n      }),\n      pe = fe.lineGenerator,\n      he = fe.areaGenerator,\n      ye = fe.series,\n      ge = fe.xScale,\n      me = fe.yScale,\n      ve = fe.points,\n      xe = _({\n        points: ve,\n        width: te,\n        height: oe,\n        debug: I\n      }),\n      Re = xe.delaunay,\n      qe = xe.voronoi;\n    l(function () {\n      U && (U.current = Z.current), Z.current.width = ae * d, Z.current.height = se * d;\n      var e = Z.current.getContext(\"2d\");\n      e.scale(d, d), e.fillStyle = le.background, e.fillRect(0, 0, ae, se), e.translate(ne.left, ne.top), g.forEach(function (r) {\n        if (\"function\" == typeof r && r({\n          ctx: e,\n          innerWidth: te,\n          innerHeight: oe,\n          series: ye,\n          points: ve,\n          xScale: ge,\n          yScale: me,\n          lineWidth: v,\n          lineGenerator: pe,\n          areaGenerator: he,\n          currentPoint: de,\n          setCurrentPoint: ce\n        }), \"grid\" === r && le.grid.line.strokeWidth > 0 && (e.lineWidth = le.grid.line.strokeWidth, e.strokeStyle = le.grid.line.stroke, W && P(e, {\n          width: te,\n          height: oe,\n          scale: ge,\n          axis: \"x\",\n          values: G\n        }), L && P(e, {\n          width: te,\n          height: oe,\n          scale: me,\n          axis: \"y\",\n          values: F\n        })), \"axes\" === r && j(e, {\n          xScale: ge,\n          yScale: me,\n          width: te,\n          height: oe,\n          top: V,\n          right: Y,\n          bottom: D,\n          left: X,\n          theme: le\n        }), \"areas\" === r && !0 === x && (e.save(), e.globalAlpha = O, he.context(e), ye.forEach(function (r) {\n          e.fillStyle = r.color, e.beginPath(), he(r.data.map(function (e) {\n            return e.position;\n          })), e.fill();\n        }), e.restore()), \"lines\" === r && (pe.context(e), ye.forEach(function (r) {\n          e.strokeStyle = r.color, e.lineWidth = v, e.beginPath(), pe(r.data.map(function (e) {\n            return e.position;\n          })), e.stroke();\n        })), \"points\" === r && !0 === S && C > 0 && ve.forEach(function (r) {\n          e.fillStyle = r.color, e.beginPath(), e.arc(r.x, r.y, C / 2, 0, 2 * Math.PI), e.fill(), B > 0 && (e.strokeStyle = r.borderColor, e.lineWidth = B, e.stroke());\n        }), \"mesh\" === r && !0 === I && (ee(e, qe), de && re(e, qe, de.index)), \"legends\" === r) {\n          var i = ye.map(function (e) {\n            return {\n              id: e.id,\n              label: e.id,\n              color: e.color\n            };\n          }).reverse();\n          A.forEach(function (r) {\n            E(e, ie({}, r, {\n              data: r.data || i,\n              containerWidth: te,\n              containerHeight: oe,\n              theme: le\n            }));\n          });\n        }\n      });\n    }, [Z, ae, se, g, le, pe, ye, ge, me, W, G, L, F, V, Y, D, X, A, ve, S, C, de]);\n    var Oe = n(function (e) {\n        var r = T(Z.current, e),\n          i = r[0],\n          n = r[1];\n        if (!M(ne.left, ne.top, te, oe, i, n)) return null;\n        var t = Re.find(i - ne.left, n - ne.top);\n        return ve[t];\n      }, [Z, ne, te, oe, Re]),\n      Se = z(),\n      Ce = Se.showTooltipFromEvent,\n      Te = Se.hideTooltip,\n      Me = n(function (e) {\n        var r = Oe(e);\n        ce(r), r ? Ce(t(Q, {\n          point: r\n        }), e) : Te();\n      }, [Oe, ce, Ce, Te, Q]),\n      we = n(function (e) {\n        Te(), ce(null), de && J && J(de, e);\n      }, [Te, ce, J]),\n      Be = n(function (e) {\n        if (K) {\n          var r = Oe(e);\n          r && K(r, e);\n        }\n      }, [Oe, K]);\n    return N(\"canvas\", {\n      ref: Z,\n      width: ae * d,\n      height: se * d,\n      style: {\n        width: ae,\n        height: se,\n        cursor: H ? \"auto\" : \"normal\"\n      },\n      onMouseEnter: H ? Me : void 0,\n      onMouseMove: H ? Me : void 0,\n      onMouseLeave: H ? we : void 0,\n      onClick: H ? Be : void 0\n    });\n  };\nje.propTypes = ue, je.defaultProps = fe;\nvar Fe = x(je),\n  Ve = a(function (e, r) {\n    return N(Fe, ie({}, e, {\n      canvasRef: r\n    }));\n  }),\n  Ee = a(function (e, r) {\n    return N(C, {\n      children: function (i) {\n        var n = i.width,\n          t = i.height;\n        return N(Ve, ie({\n          width: n,\n          height: t\n        }, e, {\n          ref: r\n        }));\n      }\n    });\n  });\nexport { Le as Line, Ve as LineCanvas, fe as LineCanvasDefaultProps, ue as LineCanvasPropTypes, ce as LineDefaultProps, le as LinePropTypes, Pe as ResponsiveLine, Ee as ResponsiveLineCanvas, he as useAreaGenerator, be as useLine, pe as useLineGenerator, ye as useSlices };","map":{"version":3,"names":["ne","LinePointTooltip","e","r","point","N","Y","id","Q","children","data","xFormatted","yFormatted","enableChip","color","serieColor","propTypes","K","object","isRequired","te","oe","SliceTooltip","slice","i","axis","n","u","t","D","rows","points","map","X","style","tooltip","chip","serieId","tableCellValue","oneOf","ae","se","arrayOf","shape","oneOfType","string","number","x","instanceOf","Date","y","xScale","xFormat","func","yScale","yFormat","layers","curve","d","axisTop","W","axisRight","axisBottom","axisLeft","enableGridX","bool","enableGridY","gridXValues","gridYValues","enablePoints","pointSymbol","pointSize","pointColor","any","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","markers","value","colors","w","enableArea","areaOpacity","areaBlendMode","c","areaBaselineValue","lineWidth","legends","F","isInteractive","debugMesh","enableSlices","debugSlices","sliceTooltip","enableCrosshair","crosshairType","le","ie","role","useMesh","f","p","ue","pixelRatio","de","type","min","max","from","theme","scheme","ce","animate","motionConfig","defs","fill","fe","window","devicePixelRatio","pe","useLineGenerator","H","defined","h","he","useAreaGenerator","I","y1","y0","ye","useSlices","width","o","height","Map","forEach","has","get","push","set","Array","entries","sort","a","s","l","x0","reverse","be","useLine","b","g","m","v","R","q","O","S","C","T","enableSlicesTooltip","M","B","G","L","k","P","j","V","E","J","filter","indexOf","series","z","label","find","Boolean","legendData","hidden","A","concat","getPointColor","getPointBorderColor","formatX","formatY","reduce","position","index","length","borderColor","toggleSerie","lineGenerator","areaGenerator","getColor","slices","ge","AreaPath","path","config","U","immediate","Z","fillOpacity","strokeWidth","mixBlendMode","me","Areas","lines","ve","xe","LinesItem","thickness","stroke","Re","qe","Lines","Oe","Se","SlicesItem","debug","isCurrent","setCurrent","showTooltipFromEvent","hideTooltip","strokeOpacity","onMouseEnter","onMouseMove","onMouseLeave","Ce","Te","Slices","current","Me","we","Points","symbol","size","borderWidth","enableLabel","labelYOffset","datum","Be","ke","Mesh","margin","onClick","showTooltipAt","left","top","$","nodes","We","Ge","Line","pointLabelYOffset","_","ee","re","innerWidth","innerHeight","outerWidth","outerHeight","Le","Pe","je","Fe","Ve","Ee","Ye","De","Xe","ze","Ae","grid","xValues","yValues","axes","right","bottom","areas","crosshair","mesh","containerWidth","containerHeight","He","currentPoint","setCurrentPoint","currentSlice","setCurrentSlice","defaultProps","ResponsiveLine","ResponsiveWrapper","LineCanvas","canvasRef","delaunay","voronoi","getContext","scale","fillStyle","background","fillRect","translate","ctx","line","strokeStyle","values","save","globalAlpha","context","beginPath","restore","arc","Math","PI","ref","cursor","LineCanvasDefaultProps","LineCanvasPropTypes","LineDefaultProps","LinePropTypes","ResponsiveLineCanvas"],"sources":["/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/PointTooltip.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/SliceTooltip.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/props.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/hooks.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/Areas.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/LinesItem.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/Lines.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/SlicesItem.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/Slices.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/Points.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/Mesh.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/Line.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/ResponsiveLine.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/LineCanvas.js","/Users/mtc/Yara/task2/react-admin/node_modules/@nivo/line/src/ResponsiveLineCanvas.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nLinePointTooltip.propTypes = {\n    point: PropTypes.object.isRequired,\n}\n\nexport default memo(LinePointTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nSliceTooltip.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n}\n\nexport default memo(SliceTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { LegendPropShape } from '@nivo/legends'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    xScale: PropTypes.object.isRequired,\n    xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    yScale: PropTypes.object.isRequired,\n    yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'grid',\n                'markers',\n                'axes',\n                'areas',\n                'crosshair',\n                'lines',\n                'slices',\n                'points',\n                'mesh',\n                'legends',\n            ]),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    curve: lineCurvePropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    gridYValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n\n    enablePoints: PropTypes.bool.isRequired,\n    pointSymbol: PropTypes.func,\n    pointSize: PropTypes.number.isRequired,\n    pointColor: PropTypes.any.isRequired,\n    pointBorderWidth: PropTypes.number.isRequired,\n    pointBorderColor: PropTypes.any.isRequired,\n    enablePointLabel: PropTypes.bool.isRequired,\n    pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    colors: ordinalColorsPropType.isRequired,\n\n    enableArea: PropTypes.bool.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    areaBaselineValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.instanceOf(Date),\n    ]).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n    debugSlices: PropTypes.bool.isRequired,\n    sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableCrosshair: PropTypes.bool.isRequired,\n    crosshairType: PropTypes.string.isRequired,\n}\n\nexport const LinePropTypes = {\n    ...commonPropTypes,\n    enablePointLabel: PropTypes.bool.isRequired,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    ...motionPropTypes,\n    ...defsPropTypes,\n}\n\nexport const LineCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: x,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [enableSlices, points])\n}\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n}) => {\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState([])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nAreaPath.propTypes = {\n    areaBlendMode: blendModePropType.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    fill: PropTypes.string,\n    path: PropTypes.string.isRequired,\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nAreas.propTypes = {\n    areaGenerator: PropTypes.func.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    lines: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default memo(Areas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nLinesItem.propTypes = {\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        })\n    ),\n    lineGenerator: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n    thickness: PropTypes.number.isRequired,\n}\n\nexport default memo(LinesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nLines.propTypes = {\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            color: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    data: PropTypes.shape({\n                        x: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                        y: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                    }).isRequired,\n                    position: PropTypes.shape({\n                        x: PropTypes.number,\n                        y: PropTypes.number,\n                    }).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n}\n\nexport default memo(Lines)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({ slice, axis, debug, tooltip, isCurrent, setCurrent }) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrent(null)\n    }, [hideTooltip])\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n\nSlicesItem.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    isCurrent: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(SlicesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({ slices, axis, debug, height, tooltip, current, setCurrent }) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n        />\n    ))\n}\n\nSlices.propTypes = {\n    slices: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            points: PropTypes.arrayOf(PropTypes.object).isRequired,\n        })\n    ).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    current: PropTypes.object,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(Slices)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points\n        .slice(0)\n        .reverse()\n        .map(point => {\n            const mappedPoint = {\n                id: point.id,\n                x: point.x,\n                y: point.y,\n                datum: point.data,\n                fill: point.color,\n                stroke: point.borderColor,\n                label: enableLabel ? getLabel(point.data) : null,\n            }\n\n            return mappedPoint\n        })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nPoints.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object),\n    symbol: PropTypes.func,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelYOffset: PropTypes.number,\n}\n\nexport default memo(Points)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: PropTypes.object.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useState } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport { LinePropTypes, LineDefaultProps } from './props'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        layers,\n        curve,\n        areaBaselineValue,\n\n        colors,\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        enableGridX,\n        enableGridY,\n        gridXValues,\n        gridYValues,\n\n        lineWidth,\n        enableArea,\n        areaOpacity,\n        areaBlendMode,\n\n        enablePoints,\n        pointSymbol,\n        pointSize,\n        pointColor,\n        pointBorderWidth,\n        pointBorderColor,\n        enablePointLabel,\n        pointLabel,\n        pointLabelYOffset,\n\n        defs,\n        fill,\n\n        markers,\n\n        legends,\n\n        isInteractive,\n\n        useMesh,\n        debugMesh,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n\n        tooltip,\n\n        enableSlices,\n        debugSlices,\n        sliceTooltip,\n\n        enableCrosshair,\n        crosshairType,\n\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nLine.propTypes = LinePropTypes\nLine.defaultProps = LineDefaultProps\n\nexport default withContainer(Line)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { LineCanvasPropTypes, LineCanvasDefaultProps } from './props'\nimport { useLine } from './hooks'\n\nconst LineCanvas = ({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio,\n\n    data,\n    xScale: xScaleSpec,\n    xFormat,\n    yScale: yScaleSpec,\n    yFormat,\n    curve,\n\n    layers,\n\n    colors,\n    lineWidth,\n\n    enableArea,\n    areaBaselineValue,\n    areaOpacity,\n\n    enablePoints,\n    pointSize,\n    pointColor,\n    pointBorderWidth,\n    pointBorderColor,\n\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n\n    legends,\n\n    isInteractive,\n    debugMesh,\n    //onMouseEnter,\n    //onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n\n    canvasRef,\n}) => {\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.fillStyle = serie.color\n                    ctx.beginPath()\n                    areaGenerator(serie.data.map(d => d.position))\n                    ctx.fill()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nLineCanvas.propTypes = LineCanvasPropTypes\nLineCanvas.defaultProps = LineCanvasDefaultProps\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAYA,IAAMA,EAAA,GAAmB,SAAAC,CAAAC,CAAA;EAAA,IAAGC,CAAA,GAAAD,CAAA,CAAAE,KAAA;EAAA,OAEpBC,CAAA,CAACC,CAAA;IACGC,EAAA,EACIC,CAAA;MAAAC,QAAA,UACOJ,CAAA;QAAAI,QAAA,EAASN,CAAA,CAAMO,IAAA,CAAKC;MAAA,YAAyB,KAChDN,CAAA;QAAAI,QAAA,EAASN,CAAA,CAAMO,IAAA,CAAKE;MAAA;IAAA;IAG5BC,UAAA,GAAY;IACZC,KAAA,EAAOX,CAAA,CAAMY;EAAA;AAAA;AAKzBf,EAAA,CAAiBgB,SAAA,GAAY;EACzBZ,KAAA,EAAOa,CAAA,CAAUC,MAAA,CAAOC;AAAA;AAG5B,IAAAC,EAAA,GAAelB,CAAA,CAAKF,EAAA;EClBdqB,EAAA,GAAe,SAAAC,CAAApB,CAAA;IAAA,IAAGC,CAAA,GAAAD,CAAA,CAAAqB,KAAA;MAAOC,CAAA,GAAAtB,CAAA,CAAAuB,IAAA;MACrBC,CAAA,GAAQC,CAAA;MACRC,CAAA,GAAqB,QAATJ,CAAA,GAAe,MAAM;IAAA,OAGnCnB,CAAA,CAACwB,CAAA;MACGC,IAAA,EAAM3B,CAAA,CAAM4B,MAAA,CAAOC,GAAA,CAAI,UAAA9B,CAAA;QAAA,OAAS,CAC5BG,CAAA,CAAC4B,CAAA;UAAgBnB,KAAA,EAAOZ,CAAA,CAAMa,UAAA;UAAYmB,KAAA,EAAOR,CAAA,CAAMS,OAAA,CAAQC;QAAA,GAArD,SACVlC,CAAA,CAAMmC,OAAA,EACNhC,CAAA;UAAkB6B,KAAA,EAAOR,CAAA,CAAMS,OAAA,CAAQG,cAAA;UAAA7B,QAAA,EAClCP,CAAA,CAAMQ,IAAA,CAAQkB,CAAA;QAAA,GADT;MAAA;IAAA;EAAA;AAQ1BP,EAAA,CAAaL,SAAA,GAAY;EACrBO,KAAA,EAAON,CAAA,CAAUC,MAAA,CAAOC,UAAA;EACxBM,IAAA,EAAMR,CAAA,CAAUsB,KAAA,CAAM,CAAC,KAAK,MAAMpB;AAAA;AAGtC,IAAAqB,EAAA,GAAetC,CAAA,CAAKmB,EAAA;ECnBdoB,EAAA,GAAkB;IACpB/B,IAAA,EAAMO,CAAA,CAAUyB,OAAA,CACZzB,CAAA,CAAU0B,KAAA,CAAM;MACZpC,EAAA,EAAIU,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAU4B,MAAA,EAAQ5B,CAAA,CAAU6B,MAAA,GAAS3B,UAAA;MAC9DT,IAAA,EAAMO,CAAA,CAAUyB,OAAA,CACZzB,CAAA,CAAU0B,KAAA,CAAM;QACZI,CAAA,EAAG9B,CAAA,CAAU2B,SAAA,CAAU,CACnB3B,CAAA,CAAU6B,MAAA,EACV7B,CAAA,CAAU4B,MAAA,EACV5B,CAAA,CAAU+B,UAAA,CAAWC,IAAA;QAEzBC,CAAA,EAAGjC,CAAA,CAAU2B,SAAA,CAAU,CACnB3B,CAAA,CAAU6B,MAAA,EACV7B,CAAA,CAAU4B,MAAA,EACV5B,CAAA,CAAU+B,UAAA,CAAWC,IAAA;MAAA,IAG/B9B;IAAA,IAERA,UAAA;IAEFgC,MAAA,EAAQlC,CAAA,CAAUC,MAAA,CAAOC,UAAA;IACzBiC,OAAA,EAASnC,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAUoC,IAAA,EAAMpC,CAAA,CAAU4B,MAAA;IACxDS,MAAA,EAAQrC,CAAA,CAAUC,MAAA,CAAOC,UAAA;IACzBoC,OAAA,EAAStC,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAUoC,IAAA,EAAMpC,CAAA,CAAU4B,MAAA;IAExDW,MAAA,EAAQvC,CAAA,CAAUyB,OAAA,CACdzB,CAAA,CAAU2B,SAAA,CAAU,CAChB3B,CAAA,CAAUsB,KAAA,CAAM,CACZ,QACA,WACA,QACA,SACA,aACA,SACA,UACA,UACA,QACA,aAEJtB,CAAA,CAAUoC,IAAA,IAEhBlC,UAAA;IAEFsC,KAAA,EAAOC,CAAA,CAAkBvC,UAAA;IAEzBwC,OAAA,EAASC,CAAA;IACTC,SAAA,EAAWD,CAAA;IACXE,UAAA,EAAYF,CAAA;IACZG,QAAA,EAAUH,CAAA;IAEVI,WAAA,EAAa/C,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;IAC5B+C,WAAA,EAAajD,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;IAC5BgD,WAAA,EAAalD,CAAA,CAAU2B,SAAA,CAAU,CAC7B3B,CAAA,CAAU6B,MAAA,EACV7B,CAAA,CAAUyB,OAAA,CACNzB,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAU6B,MAAA,EAAQ7B,CAAA,CAAU4B,MAAA,EAAQ5B,CAAA,CAAU+B,UAAA,CAAWC,IAAA;IAGtFmB,WAAA,EAAanD,CAAA,CAAU2B,SAAA,CAAU,CAC7B3B,CAAA,CAAU6B,MAAA,EACV7B,CAAA,CAAUyB,OAAA,CACNzB,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAU6B,MAAA,EAAQ7B,CAAA,CAAU4B,MAAA,EAAQ5B,CAAA,CAAU+B,UAAA,CAAWC,IAAA;IAItFoB,YAAA,EAAcpD,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;IAC7BmD,WAAA,EAAarD,CAAA,CAAUoC,IAAA;IACvBkB,SAAA,EAAWtD,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;IAC5BqD,UAAA,EAAYvD,CAAA,CAAUwD,GAAA,CAAItD,UAAA;IAC1BuD,gBAAA,EAAkBzD,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;IACnCwD,gBAAA,EAAkB1D,CAAA,CAAUwD,GAAA,CAAItD,UAAA;IAChCyD,gBAAA,EAAkB3D,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;IACjC0D,UAAA,EAAY5D,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAU4B,MAAA,EAAQ5B,CAAA,CAAUoC,IAAA,GAAOlC,UAAA;IAEpE2D,OAAA,EAAS7D,CAAA,CAAUyB,OAAA,CACfzB,CAAA,CAAU0B,KAAA,CAAM;MACZlB,IAAA,EAAMR,CAAA,CAAUsB,KAAA,CAAM,CAAC,KAAK,MAAMpB,UAAA;MAClC4D,KAAA,EAAO9D,CAAA,CAAU2B,SAAA,CAAU,CACvB3B,CAAA,CAAU6B,MAAA,EACV7B,CAAA,CAAU4B,MAAA,EACV5B,CAAA,CAAU+B,UAAA,CAAWC,IAAA,IACtB9B,UAAA;MACHe,KAAA,EAAOjB,CAAA,CAAUC;IAAA;IAIzB8D,MAAA,EAAQC,CAAA,CAAsB9D,UAAA;IAE9B+D,UAAA,EAAYjE,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;IAC3BgE,WAAA,EAAalE,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;IAC9BiE,aAAA,EAAeC,CAAA,CAAkBlE,UAAA;IACjCmE,iBAAA,EAAmBrE,CAAA,CAAU2B,SAAA,CAAU,CACnC3B,CAAA,CAAU6B,MAAA,EACV7B,CAAA,CAAU4B,MAAA,EACV5B,CAAA,CAAU+B,UAAA,CAAWC,IAAA,IACtB9B,UAAA;IACHoE,SAAA,EAAWtE,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;IAE5BqE,OAAA,EAASvE,CAAA,CAAUyB,OAAA,CAAQzB,CAAA,CAAU0B,KAAA,CAAM8C,CAAA,GAAkBtE,UAAA;IAE7DuE,aAAA,EAAezE,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;IAC9BwE,SAAA,EAAW1E,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;IAE1BgB,OAAA,EAASlB,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAUoC,IAAA,EAAMpC,CAAA,CAAUC,MAAA,GAASC,UAAA;IAEjEyE,YAAA,EAAc3E,CAAA,CAAUsB,KAAA,CAAM,CAAC,KAAK,MAAK,IAAQpB,UAAA;IACjD0E,WAAA,EAAa5E,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;IAC5B2E,YAAA,EAAc7E,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAUoC,IAAA,EAAMpC,CAAA,CAAUC,MAAA,GAASC,UAAA;IAEtE4E,eAAA,EAAiB9E,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;IAChC6E,aAAA,EAAe/E,CAAA,CAAU4B,MAAA,CAAO1B;EAAA;EAGvB8E,EAAA,GAAAC,EAAA,KACNzD,EAAA;IACHmC,gBAAA,EAAkB3D,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;IACjCgF,IAAA,EAAMlF,CAAA,CAAU4B,MAAA,CAAO1B,UAAA;IACvBiF,OAAA,EAASnF,CAAA,CAAUgD,IAAA,CAAK9C;EAAA,GACrBkF,CAAA,EACAC,CAAA;EAGMC,EAAA,GAAAL,EAAA;IACTM,UAAA,EAAYvF,CAAA,CAAU6B,MAAA,CAAO3B;EAAA,GAC1BsB,EAAA;EAGDgE,EAAA,GAAqB;IACvBhD,KAAA,EAAO;IAEPN,MAAA,EAAQ;MACJuD,IAAA,EAAM;IAAA;IAEVpD,MAAA,EAAQ;MACJoD,IAAA,EAAM;MACNC,GAAA,EAAK;MACLC,GAAA,EAAK;IAAA;IAGTpD,MAAA,EAAQ,CACJ,QACA,WACA,QACA,SACA,aACA,SACA,UACA,UACA,QACA;IAEJM,UAAA,EAAY;IACZC,QAAA,EAAU;IACVC,WAAA,GAAa;IACbE,WAAA,GAAa;IAEbG,YAAA,GAAc;IACdE,SAAA,EAAW;IACXC,UAAA,EAAY;MAAEqC,IAAA,EAAM;IAAA;IACpBnC,gBAAA,EAAkB;IAClBC,gBAAA,EAAkB;MAAEmC,KAAA,EAAO;IAAA;IAC3BlC,gBAAA,GAAkB;IAClBC,UAAA,EAAY;IAEZG,MAAA,EAAQ;MAAE+B,MAAA,EAAQ;IAAA;IAClB7B,UAAA,GAAY;IACZI,iBAAA,EAAmB;IACnBH,WAAA,EAAa;IACbC,aAAA,EAAe;IACfG,SAAA,EAAW;IAEXC,OAAA,EAAS;IAETE,aAAA,GAAe;IACfvD,OAAA,EAASf,EAAA;IACTwE,YAAA,GAAc;IACdC,WAAA,GAAa;IACbC,YAAA,EAActD,EAAA;IACdmD,SAAA,GAAW;IACXI,eAAA,GAAiB;IACjBC,aAAA,EAAe;EAAA;EAGNgB,EAAA,GAAAd,EAAA,KACNO,EAAA;IACH7B,gBAAA,GAAkB;IAClBwB,OAAA,GAAS;IACTa,OAAA,GAAS;IACTC,YAAA,EAAc;IACdC,IAAA,EAAM;IACNC,IAAA,EAAM;IACNjB,IAAA,EAAM;EAAA;EAGGkB,EAAA,GAAAnB,EAAA,KACNO,EAAA;IACHD,UAAA,EAA8B,sBAAXc,MAAA,IAAyBA,MAAA,CAAOC,gBAAA,IAAwB;EAAA;ECtMlEC,EAAA,GAAmB,SAAAC,CAAAvH,CAAA;IAAA,IAAGsB,CAAA,GAAAtB,CAAA,CAAAuD,KAAA;IAAA,OACxBtD,CAAA,CACH;MAAA,OACIuH,CAAA,GACKC,OAAA,CAAQ,UAAAzH,CAAA;QAAA,OAAa,SAARA,CAAA,CAAE6C,CAAA,IAAsB,SAAR7C,CAAA,CAAEgD,CAAA;MAAA,GAC/BH,CAAA,CAAE,UAAA7C,CAAA;QAAA,OAAKA,CAAA,CAAE6C,CAAA;MAAA,GACTG,CAAA,CAAE,UAAAhD,CAAA;QAAA,OAAKA,CAAA,CAAEgD,CAAA;MAAA,GACTO,KAAA,CAAMmE,CAAA,CAAcpG,CAAA;IAAA,GAC7B,CAACA,CAAA;EAAA;EAIIqG,EAAA,GAAmB,SAAAC,CAAA5H,CAAA;IAAA,IAAGsB,CAAA,GAAAtB,CAAA,CAAAuD,KAAA;MAAO/B,CAAA,GAAAxB,CAAA,CAAAoD,MAAA;MAAQ1B,CAAA,GAAA1B,CAAA,CAAAoF,iBAAA;IAAA,OACvCnF,CAAA,CAAQ;MAAA,OACJ4H,CAAA,GACFJ,OAAA,CAAQ,UAAAzH,CAAA;QAAA,OAAa,SAARA,CAAA,CAAE6C,CAAA,IAAsB,SAAR7C,CAAA,CAAEgD,CAAA;MAAA,GAC/BH,CAAA,CAAE,UAAA7C,CAAA;QAAA,OAAKA,CAAA,CAAE6C,CAAA;MAAA,GACTiF,EAAA,CAAG,UAAA9H,CAAA;QAAA,OAAKA,CAAA,CAAEgD,CAAA;MAAA,GACVO,KAAA,CAAMmE,CAAA,CAAcpG,CAAA,GACpByG,EAAA,CAAGvG,CAAA,CAAOE,CAAA;IAAA,GAChB,CAACJ,CAAA,EAAOE,CAAA,EAAQE,CAAA;EAAA;EAkCVsG,EAAA,GAAY,SAAAC,CAAAjI,CAAA;IAAA,IAAGsB,CAAA,GAAAtB,CAAA,CAAA0F,YAAA;MAAclE,CAAA,GAAAxB,CAAA,CAAA6B,MAAA;MAAQH,CAAA,GAAA1B,CAAA,CAAAkI,KAAA;MAAOC,CAAA,GAAAnI,CAAA,CAAAoI,MAAA;IAAA,OAC9CnI,CAAA,CAAQ;MAAA,KACU,MAAjBqB,CAAA,EAAwB,OAAO;MAAA,IAEd,QAAjBA,CAAA,EAAsB;QAAA,IAChBtB,CAAA,GAAM,IAAIqI,GAAA;QAAA,OAChB7G,CAAA,CAAO8G,OAAA,CAAQ,UAAArI,CAAA;UACU,SAAjBA,CAAA,CAAMO,IAAA,CAAKqC,CAAA,IAA+B,SAAjB5C,CAAA,CAAMO,IAAA,CAAKwC,CAAA,KACnChD,CAAA,CAAIuI,GAAA,CAAItI,CAAA,CAAM4C,CAAA,IACd7C,CAAA,CAAIwI,GAAA,CAAIvI,CAAA,CAAM4C,CAAA,EAAG4F,IAAA,CAAKxI,CAAA,IADJD,CAAA,CAAI0I,GAAA,CAAIzI,CAAA,CAAM4C,CAAA,EAAG,CAAC5C,CAAA;QAAA,IAGtC0I,KAAA,CAAMhC,IAAA,CAAK3G,CAAA,CAAI4I,OAAA,IACjBC,IAAA,CAAK,UAAC7I,CAAA,EAAGC,CAAA;UAAA,OAAMD,CAAA,CAAE,KAAKC,CAAA,CAAE;QAAA,GACxB6B,GAAA,CAAI,UAAA9B,CAAA,EAAmBC,CAAA,EAAGqB,CAAA;UAAA,IAInBE,CAAA;YAJDsH,CAAA,GAAA9I,CAAA;YAAG+I,CAAA,GAAA/I,CAAA;YACAgJ,CAAA,GAAY1H,CAAA,CAAOrB,CAAA,GAAI;YACvBwB,CAAA,GAAYH,CAAA,CAAOrB,CAAA,GAAI;UAAA,OAUtB;YACHI,EAAA,EAAIyI,CAAA;YACJG,EAAA,EARCzH,CAAA,GADAwH,CAAA,GACKF,CAAA,IAAKA,CAAA,GAAIE,CAAA,CAAU,MAAM,IADdF,CAAA;YAUjBjG,CAAA,EAAAiG,CAAA;YACAf,EAAA,EAAI;YACJ/E,CAAA,EAAG;YACHkF,KAAA,EATCzG,CAAA,GACaqH,CAAA,GAAItH,CAAA,IAAMC,CAAA,CAAU,KAAKqH,CAAA,IAAK,IADnBpH,CAAA,GAAQF,CAAA;YAUjC4G,MAAA,EAAAD,CAAA;YACAtG,MAAA,EAAQkH,CAAA,CAAYG,OAAA;UAAA;QAAA;MAAA;MAG7B,IAAqB,QAAjB5H,CAAA,EAAsB;QAAA,IACvBrB,CAAA,GAAM,IAAIoI,GAAA;QAAA,OAChB7G,CAAA,CAAO8G,OAAA,CAAQ,UAAAtI,CAAA;UACU,SAAjBA,CAAA,CAAMQ,IAAA,CAAKqC,CAAA,IAA+B,SAAjB7C,CAAA,CAAMQ,IAAA,CAAKwC,CAAA,KACnC/C,CAAA,CAAIsI,GAAA,CAAIvI,CAAA,CAAMgD,CAAA,IACd/C,CAAA,CAAIuI,GAAA,CAAIxI,CAAA,CAAMgD,CAAA,EAAGyF,IAAA,CAAKzI,CAAA,IADJC,CAAA,CAAIyI,GAAA,CAAI1I,CAAA,CAAMgD,CAAA,EAAG,CAAChD,CAAA;QAAA,IAGtC2I,KAAA,CAAMhC,IAAA,CAAK1G,CAAA,CAAI2I,OAAA,IACjBC,IAAA,CAAK,UAAC7I,CAAA,EAAGC,CAAA;UAAA,OAAMD,CAAA,CAAE,KAAKC,CAAA,CAAE;QAAA,GACxB6B,GAAA,CAAI,UAAA9B,CAAA,EAAmBC,CAAA,EAAGqB,CAAA;UAAA,IAInBE,CAAA;YAIAsH,CAAA;YARDC,CAAA,GAAA/I,CAAA;YAAGgJ,CAAA,GAAAhJ,CAAA;YACAyB,CAAA,GAAYH,CAAA,CAAOrB,CAAA,GAAI;YACvBuD,CAAA,GAAYlC,CAAA,CAAOrB,CAAA,GAAI;UAAA,OAIxBuB,CAAA,GADAC,CAAA,GACKsH,CAAA,IAAKA,CAAA,GAAItH,CAAA,CAAU,MAAM,IADdsH,CAAA,EAKhBD,CAAA,GADAtF,CAAA,GACcuF,CAAA,GAAIvH,CAAA,IAAMgC,CAAA,CAAU,KAAKuF,CAAA,IAAK,IADnBZ,CAAA,GAAS3G,CAAA,EAGhC;YACHnB,EAAA,EAAI0I,CAAA;YACJE,EAAA,EAAI;YACJpG,CAAA,EAAG;YACHkF,EAAA,EAAAvG,CAAA;YACAwB,CAAA,EAAA+F,CAAA;YACAb,KAAA,EAAAxG,CAAA;YACA0G,MAAA,EAAQU,CAAA;YACRjH,MAAA,EAAQmH,CAAA,CAAYE,OAAA;UAAA;QAAA;MAAA;IAAA,GAIrC,CAAC5H,CAAA,EAAcE,CAAA;EAAA;EAGT2H,EAAA,GAAU,SAAAC,CAAApJ,CAAA;IAAA,IACnB0B,CAAA,GAAA1B,CAAA,CAAAQ,IAAA;MAAA2H,CAAA,GAAAnI,CAAA,CACAiD,MAAA;MAAQ6F,CAAA,cAAAX,CAAA,GAAarB,EAAA,CAAiB7D,MAAA,GAAAkF,CAAA;MACtCY,CAAA,GAAA/I,CAAA,CAAAkD,OAAA;MAAA8F,CAAA,GAAAhJ,CAAA,CACAoD,MAAA;MAAQI,CAAA,cAAAwF,CAAA,GAAalC,EAAA,CAAiB1D,MAAA,GAAA4F,CAAA;MACtC7D,CAAA,GAAAnF,CAAA,CAAAqD,OAAA;MACA8C,CAAA,GAAAnG,CAAA,CAAAkI,KAAA;MACA9B,CAAA,GAAApG,CAAA,CAAAoI,MAAA;MAAAV,CAAA,GAAA1H,CAAA,CACA8E,MAAA;MAAAuE,CAAA,cAAA3B,CAAA,GAASZ,EAAA,CAAiBhC,MAAA,GAAA4C,CAAA;MAAA4B,CAAA,GAAAtJ,CAAA,CAC1BuD,KAAA;MAAAgG,CAAA,cAAAD,CAAA,GAAQxC,EAAA,CAAiBvD,KAAA,GAAA+F,CAAA;MAAAE,CAAA,GAAAxJ,CAAA,CACzBoF,iBAAA;MAAAvC,CAAA,cAAA2G,CAAA,GAAoB1C,EAAA,CAAiB1B,iBAAA,GAAAoE,CAAA;MAAAC,CAAA,GAAAzJ,CAAA,CACrCsE,UAAA;MAAAoF,CAAA,cAAAD,CAAA,GAAa3C,EAAA,CAAiBxC,UAAA,GAAAmF,CAAA;MAAAE,CAAA,GAAA3J,CAAA,CAC9ByE,gBAAA;MAAAmF,CAAA,cAAAD,CAAA,GAAmB7C,EAAA,CAAiBrC,gBAAA,GAAAkF,CAAA;MAAAE,CAAA,GAAA7J,CAAA,CACpC0F,YAAA;MAAAoE,CAAA,cAAAD,CAAA,GAAe/C,EAAA,CAAiBiD,mBAAA,GAAAF,CAAA;MAE1BG,CAAA,GAAUhH,CAAA,CAAkB+F,CAAA;MAC5BhE,CAAA,GAAU/B,CAAA,CAAkBmC,CAAA;MAC5BzB,CAAA,GAAWuG,CAAA,CAAqBZ,CAAA,EAAQ;MACxCa,CAAA,GAAQzI,CAAA;MACR0I,CAAA,GAAgBC,CAAA,CAAkBV,CAAA,EAAYQ,CAAA;MAC9CG,CAAA,GAAsBD,CAAA,CAAkBR,CAAA,EAAkBM,CAAA;MAAAI,CAAA,GAC9BhJ,CAAA,CAAS;MAApCiE,CAAA,GAAA+E,CAAA;MAAWC,CAAA,GAAAD,CAAA;MAAAE,CAAA,GAMdvK,CAAA,CACA;QAAA,OACIwK,CAAA,CACI/I,CAAA,CAAKgJ,MAAA,CAAO,UAAA1K,CAAA;UAAA,QAAwC,MAAhCuF,CAAA,CAAUoF,OAAA,CAAQ3K,CAAA,CAAKK,EAAA;QAAA,IAC3CyI,CAAA,EACAtF,CAAA,EACA2C,CAAA,EACAC,CAAA;MAAA,GAER,CAAC1E,CAAA,EAAM6D,CAAA,EAAWuD,CAAA,EAAYtF,CAAA,EAAY2C,CAAA,EAAOC,CAAA;MAZjDhG,CAAA,GAAAoK,CAAA,CAAAvH,MAAA;MACAtB,CAAA,GAAA6I,CAAA,CAAApH,MAAA;MACQrB,CAAA,GAAAyI,CAAA,CAARI,MAAA;MAAAC,CAAA,GAa2B5K,CAAA,CAAQ;QAAA,IAC7BD,CAAA,GAAgB0B,CAAA,CAAKI,GAAA,CAAI,UAAA9B,CAAA;YAAA,OAAS;cACpCK,EAAA,EAAIL,CAAA,CAAKK,EAAA;cACTyK,KAAA,EAAO9K,CAAA,CAAKK,EAAA;cACZO,KAAA,EAAO8C,CAAA,CAAS1D,CAAA;YAAA;UAAA;UAEdC,CAAA,GAASD,CAAA,CACV8B,GAAA,CAAI,UAAA9B,CAAA;YAAA,OAAAgG,EAAA,KACEjE,CAAA,CAAUgJ,IAAA,CAAK,UAAA9K,CAAA;cAAA,OAASA,CAAA,CAAMI,EAAA,KAAOL,CAAA,CAAMK,EAAA;YAAA;cAC9CO,KAAA,EAAOZ,CAAA,CAAMY;YAAA;UAAA,GAEhB8J,MAAA,CAAO,UAAA1K,CAAA;YAAA,OAAQgL,OAAA,CAAQhL,CAAA,CAAKK,EAAA;UAAA;QAAA,OAK1B;UAAE4K,UAAA,EAJUjL,CAAA,CACd8B,GAAA,CAAI,UAAA9B,CAAA;YAAA,OAAAgG,EAAA,KAAchG,CAAA;cAAMkL,MAAA,GAASjL,CAAA,CAAO8K,IAAA,CAAK,UAAA9K,CAAA;gBAAA,OAASA,CAAA,CAAMI,EAAA,KAAOL,CAAA,CAAKK,EAAA;cAAA;YAAA;UAAA,GACxE6I,OAAA;UAEgB0B,MAAA,EAAA3K;QAAA;MAAA,GACtB,CAACyB,CAAA,EAAMK,CAAA,EAAW2B,CAAA;MAjBbyH,CAAA,GAAAN,CAAA,CAAAI,UAAA;MAAYzD,CAAA,GAAAqD,CAAA,CAAAD,MAAA;MAmBd/C,CAAA,GAAcrG,CAAA,CAAY,UAAAxB,CAAA;QAC5BuK,CAAA,CAAa,UAAAtK,CAAA;UAAA,OACTA,CAAA,CAAM0K,OAAA,CAAQ3K,CAAA,KAAO,IAAIC,CAAA,CAAMyK,MAAA,CAAO,UAAAzK,CAAA;YAAA,OAAQA,CAAA,KAASD,CAAA;UAAA,QAAAoL,MAAA,CAAUnL,CAAA,GAAOD,CAAA;QAAA;MAAA,GAE7E;MAEGe,CAAA,GAvKQ,UAAAf,CAAA;QAAA,IAAGsB,CAAA,GAAAtB,CAAA,CAAA4K,MAAA;UAAQpJ,CAAA,GAAAxB,CAAA,CAAAqL,aAAA;UAAe3J,CAAA,GAAA1B,CAAA,CAAAsL,mBAAA;UAAqBnD,CAAA,GAAAnI,CAAA,CAAAuL,OAAA;UAASzC,CAAA,GAAA9I,CAAA,CAAAwL,OAAA;QAAA,OAC/DvL,CAAA,CAAQ;UAAA,OACJqB,CAAA,CAAOmK,MAAA,CAAO,UAACzL,CAAA,EAAKC,CAAA;YAAA,UAAAmL,MAAA,CAEhBpL,CAAA,EACAC,CAAA,CAAMO,IAAA,CACJkK,MAAA,CAAO,UAAA1K,CAAA;cAAA,OAA8B,SAArBA,CAAA,CAAM0L,QAAA,CAAS7I,CAAA,IAAmC,SAArB7C,CAAA,CAAM0L,QAAA,CAAS1I,CAAA;YAAA,GAC5DlB,GAAA,CAAI,UAACR,CAAA,EAAOyH,CAAA;cAAA,IACHC,CAAA,GAAQ;gBACV3I,EAAA,EAAOJ,CAAA,CAAMI,EAAA,SAAM0I,CAAA;gBACnB4C,KAAA,EAAO3L,CAAA,CAAI4L,MAAA,GAAS7C,CAAA;gBACpB5G,OAAA,EAASlC,CAAA,CAAMI,EAAA;gBACfQ,UAAA,EAAYZ,CAAA,CAAMW,KAAA;gBAClBiC,CAAA,EAAGvB,CAAA,CAAMoK,QAAA,CAAS7I,CAAA;gBAClBG,CAAA,EAAG1B,CAAA,CAAMoK,QAAA,CAAS1I;cAAA;cAAA,OAEtBgG,CAAA,CAAMpI,KAAA,GAAQY,CAAA,CAAcvB,CAAA,GAC5B+I,CAAA,CAAM6C,WAAA,GAAcnK,CAAA,CAAoBsH,CAAA,GACxCA,CAAA,CAAMxI,IAAA,GAAAwF,EAAA,KACC1E,CAAA,CAAMd,IAAA;gBACTC,UAAA,EAAY0H,CAAA,CAAQ7G,CAAA,CAAMd,IAAA,CAAKqC,CAAA;gBAC/BnC,UAAA,EAAYoI,CAAA,CAAQxH,CAAA,CAAMd,IAAA,CAAKwC,CAAA;cAAA,IAG5BgG,CAAA;YAAA;UAAA,GAGpB;QAAA,GACJ,CAAC1H,CAAA,EAAQE,CAAA,EAAeE,CAAA,EAAqByG,CAAA,EAASW,CAAA;MAAA,CA2I1C,CAAU;QACrB8B,MAAA,EAAApD,CAAA;QACA6D,aAAA,EAAAlB,CAAA;QACAmB,mBAAA,EAAAjB,CAAA;QACAkB,OAAA,EAAAvB,CAAA;QACAwB,OAAA,EAAAzG;MAAA;MAGE5E,CAAA,GAAS6H,EAAA,CAAU;QACrBtC,YAAA,EAAAoE,CAAA;QACAjI,MAAA,EAAAd,CAAA;QACAmH,KAAA,EAAA/B,CAAA;QACAiC,MAAA,EAAAhC;MAAA;IAAA,OAUG;MACH6E,UAAA,EAAAE,CAAA;MACAW,WAAA,EAAAjE,CAAA;MACAkE,aAAA,EAVkBzE,EAAA,CAAiB;QAAE/D,KAAA,EAAAgG;MAAA;MAWrCyC,aAAA,EAVkBrE,EAAA,CAAiB;QACnCpE,KAAA,EAAAgG,CAAA;QACAnG,MAAA,EAAAzB,CAAA;QACAyD,iBAAA,EAAAvC;MAAA;MAQAoJ,QAAA,EAAAvI,CAAA;MACAkH,MAAA,EAAApD,CAAA;MACAvE,MAAA,EAAA7C,CAAA;MACAgD,MAAA,EAAAzB,CAAA;MACAuK,MAAA,EAAA/L,CAAA;MACA0B,MAAA,EAAAd;IAAA;EAAA;EChOFoL,EAAA,GAAW,SAAAC,CAAApM,CAAA;IAAA,IAAGC,CAAA,GAAAD,CAAA,CAAAkF,aAAA;MAAe5D,CAAA,GAAAtB,CAAA,CAAAiF,WAAA;MAAazD,CAAA,GAAAxB,CAAA,CAAAY,KAAA;MAAOc,CAAA,GAAA1B,CAAA,CAAAkH,IAAA;MAAMiB,CAAA,GAAAnI,CAAA,CAAAqM,IAAA;MAAAvD,CAAA,GACfO,CAAA;MAAlCN,CAAA,GAAAD,CAAA,CAAA/B,OAAA;MAAiBiC,CAAA,GAAAF,CAAA,CAARwD,MAAA;MAEX7K,CAAA,GAAe6H,CAAA,CAAgBnB,CAAA;MAC/B3E,CAAA,GAAgB+I,CAAA,CAAU;QAC5B3L,KAAA,EAAAY,CAAA;QACA8K,MAAA,EAAQtD,CAAA;QACRwD,SAAA,GAAYzD;MAAA;IAAA,OAIZ5I,CAAA,CAACsM,CAAA,CAASJ,IAAA;MACN7I,CAAA,EAAG/B,CAAA;MACHyF,IAAA,EAAMxF,CAAA,IAAc8B,CAAA,CAAc5C,KAAA;MAClC8L,WAAA,EAAapL,CAAA;MACbqL,WAAA,EAAa;MACb3K,KAAA,EAAO;QACH4K,YAAA,EAAc3M;MAAA;IAAA;EAAA;AAM9BkM,EAAA,CAASrL,SAAA,GAAY;EACjBoE,aAAA,EAAeC,CAAA,CAAkBlE,UAAA;EACjCgE,WAAA,EAAalE,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;EAC9BL,KAAA,EAAOG,CAAA,CAAU4B,MAAA;EACjBuE,IAAA,EAAMnG,CAAA,CAAU4B,MAAA;EAChB0J,IAAA,EAAMtL,CAAA,CAAU4B,MAAA,CAAO1B;AAAA;AAG3B,IAAM4L,EAAA,GAAQ,SAAAC,CAAA9M,CAAA;EAAA,IAAGC,CAAA,GAAAD,CAAA,CAAAgM,aAAA;IAAe1K,CAAA,GAAAtB,CAAA,CAAAiF,WAAA;IAAazD,CAAA,GAAAxB,CAAA,CAAAkF,aAAA;IACnCxD,CAAA,GAAA1B,CAAA,CADkD+M,KAAA,CAC5B1L,KAAA,CAAM,GAAG6H,OAAA;EAAA,OAGjC/I,CAAA;IAAAI,QAAA,EACKmB,CAAA,CAAcI,GAAA,CAAI,UAAA9B,CAAA;MAAA,OACfG,CAAA,CAACgM,EAAA,EAAAnG,EAAA;QAEGqG,IAAA,EAAMpM,CAAA,CAAcD,CAAA,CAAKQ,IAAA,CAAKsB,GAAA,CAAI,UAAA9B,CAAA;UAAA,OAAKA,CAAA,CAAE0L,QAAA;QAAA;MAAA,GAAA1F,EAAA;QACnCf,WAAA,EAAA3D,CAAA;QAAa4D,aAAA,EAAA1D;MAAA,GAAkBxB,CAAA,IAFhCA,CAAA,CAAKK,EAAA;IAAA;EAAA;AAAA;AAS9BwM,EAAA,CAAM/L,SAAA,GAAY;EACdkL,aAAA,EAAejL,CAAA,CAAUoC,IAAA,CAAKlC,UAAA;EAC9BgE,WAAA,EAAalE,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;EAC9BiE,aAAA,EAAeC,CAAA,CAAkBlE,UAAA;EACjC8L,KAAA,EAAOhM,CAAA,CAAUyB,OAAA,CAAQzB,CAAA,CAAUC,MAAA,EAAQC;AAAA;AAG/C,IAAA+L,EAAA,GAAehN,CAAA,CAAK6M,EAAA;ECtDdI,EAAA,GAAY,SAAAC,CAAAlN,CAAA;IAAA,IAAGsB,CAAA,GAAAtB,CAAA,CAAA+L,aAAA;MAAevK,CAAA,GAAAxB,CAAA,CAAA6B,MAAA;MAAQH,CAAA,GAAA1B,CAAA,CAAAY,KAAA;MAAOuH,CAAA,GAAAnI,CAAA,CAAAmN,SAAA;MACzCrE,CAAA,GAAO7I,CAAA,CAAQ;QAAA,OAAMqB,CAAA,CAAcE,CAAA;MAAA,GAAS,CAACF,CAAA,EAAeE,CAAA;MAC5DuH,CAAA,GAAeO,CAAA,CAAgBR,CAAA;IAAA,OAE9B3I,CAAA,CAACsM,CAAA,CAASJ,IAAA;MAAK7I,CAAA,EAAGuF,CAAA;MAAc7B,IAAA,EAAK;MAAOyF,WAAA,EAAaxE,CAAA;MAAWiF,MAAA,EAAQ1L;IAAA;EAAA;AAGvFuL,EAAA,CAAUnM,SAAA,GAAY;EAClBe,MAAA,EAAQd,CAAA,CAAUyB,OAAA,CACdzB,CAAA,CAAU0B,KAAA,CAAM;IACZI,CAAA,EAAG9B,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAU4B,MAAA,EAAQ5B,CAAA,CAAU6B,MAAA;IACpDI,CAAA,EAAGjC,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAU4B,MAAA,EAAQ5B,CAAA,CAAU6B,MAAA;EAAA;EAG5DmJ,aAAA,EAAehL,CAAA,CAAUoC,IAAA,CAAKlC,UAAA;EAC9BL,KAAA,EAAOG,CAAA,CAAU4B,MAAA,CAAO1B,UAAA;EACxBkM,SAAA,EAAWpM,CAAA,CAAU6B,MAAA,CAAO3B;AAAA;AAGhC,IAAAoM,EAAA,GAAerN,CAAA,CAAKiN,EAAA;ECpBdK,EAAA,GAAQ,SAAAC,CAAAvN,CAAA;IAAA,IAAGC,CAAA,GAAAD,CAAA,CAAA+M,KAAA;MAAOzL,CAAA,GAAAtB,CAAA,CAAA+L,aAAA;MAAevK,CAAA,GAAAxB,CAAA,CAAAqF,SAAA;IAAA,OAC5BpF,CAAA,CACFoB,KAAA,CAAM,GACN6H,OAAA,GACApH,GAAA,CAAI,UAAA9B,CAAA;MAAA,IAAGC,CAAA,GAAAD,CAAA,CAAAK,EAAA;QAAIqB,CAAA,GAAA1B,CAAA,CAAAQ,IAAA;QAAM2H,CAAA,GAAAnI,CAAA,CAAAY,KAAA;MAAA,OACdT,CAAA,CAACkN,EAAA;QAEGhN,EAAA,EAAIJ,CAAA;QACJ4B,MAAA,EAAQH,CAAA,CAAKI,GAAA,CAAI,UAAA9B,CAAA;UAAA,OAAKA,CAAA,CAAE0L,QAAA;QAAA;QACxBK,aAAA,EAAezK,CAAA;QACfV,KAAA,EAAOuH,CAAA;QACPgF,SAAA,EAAW3L;MAAA,GALNvB,CAAA;IAAA;EAAA;AAUrBqN,EAAA,CAAMxM,SAAA,GAAY;EACdiM,KAAA,EAAOhM,CAAA,CAAUyB,OAAA,CACbzB,CAAA,CAAU0B,KAAA,CAAM;IACZpC,EAAA,EAAIU,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAU4B,MAAA,EAAQ5B,CAAA,CAAU6B,MAAA,GAAS3B,UAAA;IAC9DL,KAAA,EAAOG,CAAA,CAAU4B,MAAA,CAAO1B,UAAA;IACxBT,IAAA,EAAMO,CAAA,CAAUyB,OAAA,CACZzB,CAAA,CAAU0B,KAAA,CAAM;MACZjC,IAAA,EAAMO,CAAA,CAAU0B,KAAA,CAAM;QAClBI,CAAA,EAAG9B,CAAA,CAAU2B,SAAA,CAAU,CACnB3B,CAAA,CAAU4B,MAAA,EACV5B,CAAA,CAAU6B,MAAA,EACV7B,CAAA,CAAU+B,UAAA,CAAWC,IAAA;QAEzBC,CAAA,EAAGjC,CAAA,CAAU2B,SAAA,CAAU,CACnB3B,CAAA,CAAU4B,MAAA,EACV5B,CAAA,CAAU6B,MAAA,EACV7B,CAAA,CAAU+B,UAAA,CAAWC,IAAA;MAAA,GAE1B9B,UAAA;MACHyK,QAAA,EAAU3K,CAAA,CAAU0B,KAAA,CAAM;QACtBI,CAAA,EAAG9B,CAAA,CAAU6B,MAAA;QACbI,CAAA,EAAGjC,CAAA,CAAU6B;MAAA,GACd3B;IAAA,IAETA;EAAA,IAERA,UAAA;EACFoE,SAAA,EAAWtE,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;EAC5B8K,aAAA,EAAehL,CAAA,CAAUoC,IAAA,CAAKlC;AAAA;AAGlC,IAAAuM,EAAA,GAAexN,CAAA,CAAKsN,EAAA;EC/CdG,EAAA,GAAa,SAAAC,CAAA1N,CAAA;IAAA,IAAGC,CAAA,GAAAD,CAAA,CAAAqB,KAAA;MAAOC,CAAA,GAAAtB,CAAA,CAAAuB,IAAA;MAAM4G,CAAA,GAAAnI,CAAA,CAAA2N,KAAA;MAAO7E,CAAA,GAAA9I,CAAA,CAAAiC,OAAA;MAAS8G,CAAA,GAAA/I,CAAA,CAAA4N,SAAA;MAAW5E,CAAA,GAAAhJ,CAAA,CAAA6N,UAAA;MAAApM,CAAA,GACZoJ,CAAA;MAAtCrH,CAAA,GAAA/B,CAAA,CAAAqM,oBAAA;MAAsB3I,CAAA,GAAA1D,CAAA,CAAAsM,WAAA;MAExB5H,CAAA,GAAmB3E,CAAA,CACrB,UAAAxB,CAAA;QACIwD,CAAA,CAAqB9B,CAAA,CAAcoH,CAAA,EAAS;UAAEzH,KAAA,EAAApB,CAAA;UAAOsB,IAAA,EAAAD;QAAA,IAAStB,CAAA,EAAO,UACrEgJ,CAAA,CAAW/I,CAAA;MAAA,GAEf,CAACuD,CAAA,EAAsBsF,CAAA,EAAS7I,CAAA;MAG9BmG,CAAA,GAAkB5E,CAAA,CACpB,UAAAxB,CAAA;QACIwD,CAAA,CAAqB9B,CAAA,CAAcoH,CAAA,EAAS;UAAEzH,KAAA,EAAApB,CAAA;UAAOsB,IAAA,EAAAD;QAAA,IAAStB,CAAA,EAAO;MAAA,GAEzE,CAACwD,CAAA,EAAsBsF,CAAA,EAAS7I,CAAA;MAG9ByH,CAAA,GAAmBlG,CAAA,CAAY;QACjC2D,CAAA,IACA6D,CAAA,CAAW;MAAA,GACZ,CAAC7D,CAAA;IAAA,OAGAhF,CAAA;MACI0C,CAAA,EAAG5C,CAAA,CAAMgJ,EAAA;MACTjG,CAAA,EAAG/C,CAAA,CAAM8H,EAAA;MACTG,KAAA,EAAOjI,CAAA,CAAMiI,KAAA;MACbE,MAAA,EAAQnI,CAAA,CAAMmI,MAAA;MACdgF,MAAA,EAAO;MACPT,WAAA,EAAaxE,CAAA,GAAQ,IAAI;MACzB6F,aAAA,EAAe;MACf9G,IAAA,EAAK;MACLwF,WAAA,EAAa3D,CAAA,IAAaZ,CAAA,GAAQ,MAAO;MACzC8F,YAAA,EAAc9H,CAAA;MACd+H,WAAA,EAAa9H,CAAA;MACb+H,YAAA,EAAczG;IAAA;EAAA;AAK1B+F,EAAA,CAAW3M,SAAA,GAAY;EACnBO,KAAA,EAAON,CAAA,CAAUC,MAAA,CAAOC,UAAA;EACxBM,IAAA,EAAMR,CAAA,CAAUsB,KAAA,CAAM,CAAC,KAAK,MAAMpB,UAAA;EAClC0M,KAAA,EAAO5M,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;EACtBmH,MAAA,EAAQrH,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;EACzBgB,OAAA,EAASlB,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAUoC,IAAA,EAAMpC,CAAA,CAAUC,MAAA;EACxD4M,SAAA,EAAW7M,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;EAC1B4M,UAAA,EAAY9M,CAAA,CAAUoC,IAAA,CAAKlC;AAAA;AAG/B,IAAAmN,EAAA,GAAepO,CAAA,CAAKyN,EAAA;ECnDdY,EAAA,GAAS,SAAAC,CAAAtO,CAAA;IAAA,IAAGC,CAAA,GAAAD,CAAA,CAAAkM,MAAA;MAAQ5K,CAAA,GAAAtB,CAAA,CAAAuB,IAAA;MAAMC,CAAA,GAAAxB,CAAA,CAAA2N,KAAA;MAAOjM,CAAA,GAAA1B,CAAA,CAAAoI,MAAA;MAAQD,CAAA,GAAAnI,CAAA,CAAAiC,OAAA;MAAS6G,CAAA,GAAA9I,CAAA,CAAAuO,OAAA;MAASxF,CAAA,GAAA/I,CAAA,CAAA6N,UAAA;IAAA,OACtD5N,CAAA,CAAO6B,GAAA,CAAI,UAAA9B,CAAA;MAAA,OACdG,CAAA,CAACiO,EAAA;QAEG/M,KAAA,EAAOrB,CAAA;QACPuB,IAAA,EAAMD,CAAA;QACNqM,KAAA,EAAOnM,CAAA;QACP4G,MAAA,EAAQ1G,CAAA;QACRO,OAAA,EAASkG,CAAA;QACT0F,UAAA,EAAY9E,CAAA;QACZ6E,SAAA,EAAuB,SAAZ9E,CAAA,IAAoBA,CAAA,CAAQzI,EAAA,KAAOL,CAAA,CAAMK;MAAA,GAP/CL,CAAA,CAAMK,EAAA;IAAA;EAAA;AAYvBgO,EAAA,CAAOvN,SAAA,GAAY;EACfoL,MAAA,EAAQnL,CAAA,CAAUyB,OAAA,CACdzB,CAAA,CAAU0B,KAAA,CAAM;IACZpC,EAAA,EAAIU,CAAA,CAAU2B,SAAA,CAAU,CACpB3B,CAAA,CAAU6B,MAAA,EACV7B,CAAA,CAAU4B,MAAA,EACV5B,CAAA,CAAU+B,UAAA,CAAWC,IAAA,IACtB9B,UAAA;IACH4B,CAAA,EAAG9B,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;IACpB+B,CAAA,EAAGjC,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;IACpBY,MAAA,EAAQd,CAAA,CAAUyB,OAAA,CAAQzB,CAAA,CAAUC,MAAA,EAAQC;EAAA,IAElDA,UAAA;EACFM,IAAA,EAAMR,CAAA,CAAUsB,KAAA,CAAM,CAAC,KAAK,MAAMpB,UAAA;EAClC0M,KAAA,EAAO5M,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;EACtBmH,MAAA,EAAQrH,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;EACzBgB,OAAA,EAASlB,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAUoC,IAAA,EAAMpC,CAAA,CAAUC,MAAA,GAASC,UAAA;EACjEsN,OAAA,EAASxN,CAAA,CAAUC,MAAA;EACnB6M,UAAA,EAAY9M,CAAA,CAAUoC,IAAA,CAAKlC;AAAA;AAG/B,IAAAuN,EAAA,GAAexO,CAAA,CAAKqO,EAAA;ECpCdI,EAAA,GAAS,SAAAC,CAAA1O,CAAA;IAAA,IAAGC,CAAA,GAAAD,CAAA,CAAA6B,MAAA;MAAQP,CAAA,GAAAtB,CAAA,CAAA2O,MAAA;MAAQnN,CAAA,GAAAxB,CAAA,CAAA4O,IAAA;MAAMlN,CAAA,GAAA1B,CAAA,CAAA6O,WAAA;MAAa1G,CAAA,GAAAnI,CAAA,CAAA8O,WAAA;MAAahG,CAAA,GAAA9I,CAAA,CAAA8K,KAAA;MAAO/B,CAAA,GAAA/I,CAAA,CAAA+O,YAAA;MAC/D/F,CAAA,GAAQvH,CAAA;MACR+B,CAAA,GAAW+F,CAAA,CAAkBT,CAAA;MAM7B3D,CAAA,GAAelF,CAAA,CAChBoB,KAAA,CAAM,GACN6H,OAAA,GACApH,GAAA,CAAI,UAAA9B,CAAA;QAAA,OACmB;UAChBK,EAAA,EAAIL,CAAA,CAAMK,EAAA;UACVwC,CAAA,EAAG7C,CAAA,CAAM6C,CAAA;UACTG,CAAA,EAAGhD,CAAA,CAAMgD,CAAA;UACTgM,KAAA,EAAOhP,CAAA,CAAMQ,IAAA;UACb0G,IAAA,EAAMlH,CAAA,CAAMY,KAAA;UACZwM,MAAA,EAAQpN,CAAA,CAAM6L,WAAA;UACdf,KAAA,EAAO3C,CAAA,GAAc3E,CAAA,CAASxD,CAAA,CAAMQ,IAAA,IAAQ;QAAA;MAAA;IAAA,OAOpDL,CAAA;MAAAI,QAAA,EACK4E,CAAA,CAAarD,GAAA,CAAI,UAAA9B,CAAA;QAAA,OACdG,CAAA,CAACqJ,CAAA;UAEG3G,CAAA,EAAG7C,CAAA,CAAM6C,CAAA;UACTG,CAAA,EAAGhD,CAAA,CAAMgD,CAAA;UACTgM,KAAA,EAAOhP,CAAA,CAAMgP,KAAA;UACbL,MAAA,EAAQrN,CAAA;UACRsN,IAAA,EAAMpN,CAAA;UACNZ,KAAA,EAAOZ,CAAA,CAAMkH,IAAA;UACb2H,WAAA,EAAanN,CAAA;UACbmK,WAAA,EAAa7L,CAAA,CAAMoN,MAAA;UACnBtC,KAAA,EAAO9K,CAAA,CAAM8K,KAAA;UACbiE,YAAA,EAAchG,CAAA;UACdnC,KAAA,EAAOoC;QAAA,GAXFhJ,CAAA,CAAMK,EAAA;MAAA;IAAA;EAAA;AAkB/BoO,EAAA,CAAO3N,SAAA,GAAY;EACfe,MAAA,EAAQd,CAAA,CAAUyB,OAAA,CAAQzB,CAAA,CAAUC,MAAA;EACpC2N,MAAA,EAAQ5N,CAAA,CAAUoC,IAAA;EAClByL,IAAA,EAAM7N,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;EACvBL,KAAA,EAAOG,CAAA,CAAUoC,IAAA,CAAKlC,UAAA;EACtB4N,WAAA,EAAa9N,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;EAC9B4K,WAAA,EAAa9K,CAAA,CAAUoC,IAAA,CAAKlC,UAAA;EAC5B6N,WAAA,EAAa/N,CAAA,CAAUgD,IAAA,CAAK9C,UAAA;EAC5B6J,KAAA,EAAO/J,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAU4B,MAAA,EAAQ5B,CAAA,CAAUoC,IAAA,GAAOlC,UAAA;EAC/D8N,YAAA,EAAchO,CAAA,CAAU6B;AAAA;AAG5B,IAAAqM,EAAA,GAAejP,CAAA,CAAKyO,EAAA;EC1DdS,EAAA,GAAO,SAAAC,CAAAnP,CAAA;IAAA,IACTC,CAAA,GAAAD,CAAA,CAAA6B,MAAA;MACAP,CAAA,GAAAtB,CAAA,CAAAkI,KAAA;MACAC,CAAA,GAAAnI,CAAA,CAAAoI,MAAA;MACAU,CAAA,GAAA9I,CAAA,CAAAoP,MAAA;MACArG,CAAA,GAAA/I,CAAA,CAAA6N,UAAA;MACA7E,CAAA,GAAAhJ,CAAA,CAAAiO,YAAA;MACAxM,CAAA,GAAAzB,CAAA,CAAAkO,WAAA;MACA1K,CAAA,GAAAxD,CAAA,CAAAmO,YAAA;MACAhJ,CAAA,GAAAnF,CAAA,CAAAqP,OAAA;MACAlJ,CAAA,GAAAnG,CAAA,CAAAiC,OAAA;MACAmE,CAAA,GAAApG,CAAA,CAAA2N,KAAA;MAAAjG,CAAA,GAEuCmD,CAAA;MAA/B7H,CAAA,GAAA0E,CAAA,CAAA4H,aAAA;MAAejG,CAAA,GAAA3B,CAAA,CAAAqG,WAAA;MAEjBzE,CAAA,GAAmB9H,CAAA,CACrB,UAACxB,CAAA,EAAOC,CAAA;QACJ+C,CAAA,CACItB,CAAA,CAAcyE,CAAA,EAAS;UAAEjG,KAAA,EAAAF;QAAA,IACzB,CAACA,CAAA,CAAM6C,CAAA,GAAIiG,CAAA,CAAOyG,IAAA,EAAMvP,CAAA,CAAMgD,CAAA,GAAI8F,CAAA,CAAO0G,GAAA,GACzC,QAEJzG,CAAA,CAAW/I,CAAA,GACXgJ,CAAA,IAAgBA,CAAA,CAAahJ,CAAA,EAAOC,CAAA;MAAA,GAExC,CAAC8I,CAAA,EAAY/F,CAAA,EAAemD,CAAA,EAAS6C,CAAA,EAAcF,CAAA;MAGjDS,CAAA,GAAkB/H,CAAA,CACpB,UAACxB,CAAA,EAAOC,CAAA;QACJ+C,CAAA,CACItB,CAAA,CAAcyE,CAAA,EAAS;UAAEjG,KAAA,EAAAF;QAAA,IACzB,CAACA,CAAA,CAAM6C,CAAA,GAAIiG,CAAA,CAAOyG,IAAA,EAAMvP,CAAA,CAAMgD,CAAA,GAAI8F,CAAA,CAAO0G,GAAA,GACzC,QAEJzG,CAAA,CAAW/I,CAAA,GACXyB,CAAA,IAAeA,CAAA,CAAYzB,CAAA,EAAOC,CAAA;MAAA,GAEtC,CAAC8I,CAAA,EAAY/F,CAAA,EAAemD,CAAA,EAAS1E,CAAA;MAGnC+H,CAAA,GAAmBhI,CAAA,CACrB,UAACxB,CAAA,EAAOC,CAAA;QACJoJ,CAAA,IACAN,CAAA,CAAW,OACXvF,CAAA,IAAgBA,CAAA,CAAaxD,CAAA,EAAOC,CAAA;MAAA,GAExC,CAACoJ,CAAA,EAAaN,CAAA,EAAYvF,CAAA;MAGxBX,CAAA,GAAcrB,CAAA,CAChB,UAACxB,CAAA,EAAOC,CAAA;QACJkF,CAAA,IAAWA,CAAA,CAAQnF,CAAA,EAAOC,CAAA;MAAA,GAE9B,CAACkF,CAAA;IAAA,OAIDhF,CAAA,CAACsP,CAAA;MACGC,KAAA,EAAOzP,CAAA;MACPiI,KAAA,EAAO5G,CAAA;MACP8G,MAAA,EAAQD,CAAA;MACR8F,YAAA,EAAc3E,CAAA;MACd4E,WAAA,EAAa3E,CAAA;MACb4E,YAAA,EAAc3E,CAAA;MACd6F,OAAA,EAASxM,CAAA;MACT8K,KAAA,EAAOvH;IAAA;EAAA;AAKnB8I,EAAA,CAAKpO,SAAA,GAAY;EACbe,MAAA,EAAQd,CAAA,CAAUyB,OAAA,CAAQzB,CAAA,CAAUC,MAAA,EAAQC,UAAA;EAC5CiH,KAAA,EAAOnH,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;EACxBmH,MAAA,EAAQrH,CAAA,CAAU6B,MAAA,CAAO3B,UAAA;EACzBmO,MAAA,EAAQrO,CAAA,CAAUC,MAAA,CAAOC,UAAA;EACzB4M,UAAA,EAAY9M,CAAA,CAAUoC,IAAA,CAAKlC,UAAA;EAC3BgN,YAAA,EAAclN,CAAA,CAAUoC,IAAA;EACxB+K,WAAA,EAAanN,CAAA,CAAUoC,IAAA;EACvBgL,YAAA,EAAcpN,CAAA,CAAUoC,IAAA;EACxBkM,OAAA,EAAStO,CAAA,CAAUoC,IAAA;EACnBlB,OAAA,EAASlB,CAAA,CAAU2B,SAAA,CAAU,CAAC3B,CAAA,CAAUoC,IAAA,EAAMpC,CAAA,CAAUC,MAAA,GAASC,UAAA;EACjE0M,KAAA,EAAO5M,CAAA,CAAUgD,IAAA,CAAK9C;AAAA;AAG1B,IAAA0O,EAAA,GAAe3P,CAAA,CAAKkP,EAAA;ECrEdU,EAAA,GAAO,SAAAC,CAAA7P,CAAA;IAAA,IAELC,CAAA,GAkEAD,CAAA,CAlEAQ,IAAA;MACQgB,CAAA,GAiERxB,CAAA,CAjEAiD,MAAA;MACAvB,CAAA,GAgEA1B,CAAA,CAhEAkD,OAAA;MACQ4F,CAAA,GA+DR9I,CAAA,CA/DAoD,MAAA;MACA2F,CAAA,GA8DA/I,CAAA,CA9DAqD,OAAA;MACA2F,CAAA,GA6DAhJ,CAAA,CA7DAsD,MAAA;MACAE,CAAA,GA4DAxD,CAAA,CA5DAuD,KAAA;MACA4B,CAAA,GA2DAnF,CAAA,CA3DAoF,iBAAA;MAEAe,CAAA,GAyDAnG,CAAA,CAzDA8E,MAAA;MAEQsB,CAAA,GAuDRpG,CAAA,CAvDAoP,MAAA;MACA1H,CAAA,GAsDA1H,CAAA,CAtDAkI,KAAA;MACAlF,CAAA,GAqDAhD,CAAA,CArDAoI,MAAA;MAEAiB,CAAA,GAmDArJ,CAAA,CAnDAyD,OAAA;MACA6F,CAAA,GAkDAtJ,CAAA,CAlDA2D,SAAA;MACA4F,CAAA,GAiDAvJ,CAAA,CAjDA4D,UAAA;MACA4F,CAAA,GAgDAxJ,CAAA,CAhDA6D,QAAA;MACAhB,CAAA,GA+CA7C,CAAA,CA/CA8D,WAAA;MACA+F,CAAA,GA8CA7J,CAAA,CA9CAgE,WAAA;MACA8F,CAAA,GA6CA9J,CAAA,CA7CAiE,WAAA;MACA+F,CAAA,GA4CAhK,CAAA,CA5CAkE,WAAA;MAEAa,CAAA,GA0CA/E,CAAA,CA1CAqF,SAAA;MACA4E,CAAA,GAyCAjK,CAAA,CAzCAgF,UAAA;MACAtB,CAAA,GAwCA1D,CAAA,CAxCAiF,WAAA;MACAoF,CAAA,GAuCArK,CAAA,CAvCAkF,aAAA;MAEAoF,CAAA,GAqCAtK,CAAA,CArCAmE,YAAA;MACAoB,CAAA,GAoCAvF,CAAA,CApCAoE,WAAA;MACAoG,CAAA,GAmCAxK,CAAA,CAnCAqE,SAAA;MACAjE,CAAA,GAkCAJ,CAAA,CAlCAsE,UAAA;MACA3C,CAAA,GAiCA3B,CAAA,CAjCAwE,gBAAA;MACAzC,CAAA,GAgCA/B,CAAA,CAhCAyE,gBAAA;MACAoG,CAAA,GA+BA7K,CAAA,CA/BA0E,gBAAA;MACA8C,CAAA,GA8BAxH,CAAA,CA9BA2E,UAAA;MACAkD,CAAA,GA6BA7H,CAAA,CA7BA8P,iBAAA;MAEArF,CAAA,GA2BAzK,CAAA,CA3BAiH,IAAA;MACAlG,CAAA,GA0BAf,CAAA,CA1BAkH,IAAA;MAEA5G,CAAA,GAwBAN,CAAA,CAxBA4E,OAAA;MAEA2H,CAAA,GAsBAvM,CAAA,CAtBAsF,OAAA;MAEAmH,CAAA,GAoBAzM,CAAA,CApBAwF,aAAA;MAEAiK,CAAA,GAkBAzP,CAAA,CAlBAkG,OAAA;MACA6J,CAAA,GAiBA/P,CAAA,CAjBAyF,SAAA;MAEAuK,EAAA,GAeAhQ,CAAA,CAfAiO,YAAA;MACAgC,EAAA,GAcAjQ,CAAA,CAdAkO,WAAA;MACApO,EAAA,GAaAE,CAAA,CAbAmO,YAAA;MACAjN,EAAA,GAYAlB,CAAA,CAZAqP,OAAA;MAEAlO,EAAA,GAUAnB,CAAA,CAVAiC,OAAA;MAEAK,EAAA,GAQAtC,CAAA,CARA0F,YAAA;MACAnD,EAAA,GAOAvC,CAAA,CAPA2F,WAAA;MACAI,EAAA,GAMA/F,CAAA,CANA4F,YAAA;MAEAS,EAAA,GAIArG,CAAA,CAJA6F,eAAA;MACAU,EAAA,GAGAvG,CAAA,CAHA8F,aAAA;MAEAgB,EAAA,GACA9G,CAAA,CADAiG,IAAA;MAAAkB,EAAA,GAGiEsC,CAAA,CACjE/B,CAAA,EACA1E,CAAA,EACAoD,CAAA;MAHIkB,EAAA,GAAAH,EAAA,CAAAiI,MAAA;MAAQzH,EAAA,GAAAR,EAAA,CAAA+I,UAAA;MAAYlI,EAAA,GAAAb,EAAA,CAAAgJ,WAAA;MAAahE,EAAA,GAAAhF,EAAA,CAAAiJ,UAAA;MAAYvD,EAAA,GAAA1F,EAAA,CAAAkJ,WAAA;MAAApD,EAAA,GAgBjD9D,EAAA,CAAQ;QACR3I,IAAA,EAAAP,CAAA;QACAgD,MAAA,EAAQzB,CAAA;QACR0B,OAAA,EAAAxB,CAAA;QACA0B,MAAA,EAAQ0F,CAAA;QACRzF,OAAA,EAAA0F,CAAA;QACAb,KAAA,EAAOP,EAAA;QACPS,MAAA,EAAQJ,EAAA;QACRlD,MAAA,EAAAqB,CAAA;QACA5C,KAAA,EAAAC,CAAA;QACA4B,iBAAA,EAAAD,CAAA;QACAb,UAAA,EAAAlE,CAAA;QACAqE,gBAAA,EAAA1C,CAAA;QACA2D,YAAA,EAAApD;MAAA;MAtBA+K,EAAA,GAAAJ,EAAA,CAAAhC,UAAA;MACAqC,EAAA,GAAAL,EAAA,CAAAnB,WAAA;MACA2B,EAAA,GAAAR,EAAA,CAAAlB,aAAA;MACAqC,EAAA,GAAAnB,EAAA,CAAAjB,aAAA;MACAqC,EAAA,GAAApB,EAAA,CAAArC,MAAA;MACA6D,EAAA,GAAAxB,EAAA,CAAAhK,MAAA;MACAiM,EAAA,GAAAjC,EAAA,CAAA7J,MAAA;MACAwM,EAAA,GAAA3C,EAAA,CAAAf,MAAA;MACAoE,EAAA,GAAArD,EAAA,CAAApL,MAAA;MAiBE0O,EAAA,GAAQ9O,CAAA;MACR+O,EAAA,GAAgBpG,CAAA,CAAkBhK,CAAA,EAAYmQ,EAAA;MAC9CE,EAAA,GAAsBrG,CAAA,CAAkBrI,CAAA,EAAkBwO,EAAA;MAAAG,EAAA,GAExBpP,CAAA,CAAS;MAA1CqP,EAAA,GAAAD,EAAA;MAAcE,EAAA,GAAAF,EAAA;MAAAG,EAAA,GACmBvP,CAAA,CAAS;MAA1CwP,EAAA,GAAAD,EAAA;MAAcE,EAAA,GAAAF,EAAA;MAEfG,EAAA,GAAY;QACdC,IAAA,EACI9Q,CAAA,CAAC+J,CAAA;UAEGtD,KAAA,EAAO2J,EAAA;UACPrI,KAAA,EAAOP,EAAA;UACPS,MAAA,EAAQJ,EAAA;UACR/E,MAAA,EAAQJ,CAAA,GAAc4L,EAAA,GAAS;UAC/BrL,MAAA,EAAQyG,CAAA,GAAcqF,EAAA,GAAS;UAC/BgC,OAAA,EAASpH,CAAA;UACTqH,OAAA,EAASnH;QAAA,GAPL;QAUZpF,OAAA,EACIzE,CAAA,CAACuJ,CAAA;UAEG9E,OAAA,EAAStE,CAAA;UACT4H,KAAA,EAAOP,EAAA;UACPS,MAAA,EAAQJ,EAAA;UACR/E,MAAA,EAAQwL,EAAA;UACRrL,MAAA,EAAQ8L,EAAA;UACRtI,KAAA,EAAO2J;QAAA,GANH;QASZa,IAAA,EACIjR,CAAA,CAACgK,CAAA;UAEGlH,MAAA,EAAQwL,EAAA;UACRrL,MAAA,EAAQ8L,EAAA;UACRhH,KAAA,EAAOP,EAAA;UACPS,MAAA,EAAQJ,EAAA;UACRpB,KAAA,EAAO2J,EAAA;UACPf,GAAA,EAAKnG,CAAA;UACLgI,KAAA,EAAO/H,CAAA;UACPgI,MAAA,EAAQ/H,CAAA;UACRgG,IAAA,EAAM/F;QAAA,GATF;QAYZ+H,KAAA,EAAO;QACPxE,KAAA,EACI5M,CAAA,CAACqN,EAAA;UAAkBT,KAAA,EAAOsB,EAAA;UAAQtC,aAAA,EAAe0B,EAAA;UAAepI,SAAA,EAAWN;QAAA,GAAhE;QAEfmH,MAAA,EAAQ;QACRrK,MAAA,EAAQ;QACR2P,SAAA,EAAW;QACXC,IAAA,EAAM;QACNnM,OAAA,EAASiH,CAAA,CAAQzK,GAAA,CAAI,UAAC9B,CAAA,EAAQC,CAAA;UAAA,OAC1BE,CAAA,CAACoK,CAAA,EAAAvE,EAAA,KAEOhG,CAAA;YACJ0R,cAAA,EAAgB/J,EAAA;YAChBgK,eAAA,EAAiB3J,EAAA;YACjBxH,IAAA,EAAMR,CAAA,CAAOQ,IAAA,IAAQ6M,EAAA;YACrBzG,KAAA,EAAO2J,EAAA;YACPzE,WAAA,EAAa9L,CAAA,CAAO8L,WAAA,GAAcwB,EAAA,QAAc;UAAA,gBANjCrN,CAAA;QAAA;MAAA;MAWrB2R,EAAA,GAAYjI,CAAA,CAASc,CAAA,EAAM4D,EAAA,EAAQtN,CAAA;IAAA,OAErCkJ,CAAA,KACA+G,EAAA,CAAUO,KAAA,GACNpR,CAAA,CAAC6M,EAAA;MAEGhB,aAAA,EAAeoC,EAAA;MACfnJ,WAAA,EAAavB,CAAA;MACbwB,aAAA,EAAemF,CAAA;MACf0C,KAAA,EAAOsB;IAAA,GAJH,WASZ5B,CAAA,KAAkC,MAAjBnK,EAAA,KACjB0O,EAAA,CAAU9E,MAAA,GACN/L,CAAA,CAACqO,EAAA;MAEGtC,MAAA,EAAQ0D,EAAA;MACRrO,IAAA,EAAMe,EAAA;MACNqL,KAAA,EAAOpL,EAAA;MACP6F,MAAA,EAAQJ,EAAA;MACR/F,OAAA,EAAS8D,EAAA;MACTwI,OAAA,EAASuC,EAAA;MACTjD,UAAA,EAAYkD;IAAA,GAPR,YAYZzG,CAAA,KACA0G,EAAA,CAAUnP,MAAA,GACN1B,CAAA,CAAC8O,EAAA;MAEGpN,MAAA,EAAQyO,EAAA;MACR3B,MAAA,EAAQpJ,CAAA;MACRqJ,IAAA,EAAMpE,CAAA;MACN5J,KAAA,EAAO4P,EAAA;MACP3B,WAAA,EAAalN,CAAA;MACbkK,WAAA,EAAa4E,EAAA;MACb3B,WAAA,EAAajE,CAAA;MACbC,KAAA,EAAOtD,CAAA;MACPuH,YAAA,EAAclH;IAAA,GATV,YAcZ4E,CAAA,IAAiBpG,EAAA,KACI,SAAjBsK,EAAA,KACAK,EAAA,CAAUQ,SAAA,GACNrR,CAAA,CAACgL,CAAA;MAEGjD,KAAA,EAAOP,EAAA;MACPS,MAAA,EAAQJ,EAAA;MACRnF,CAAA,EAAG8N,EAAA,CAAa9N,CAAA;MAChBG,CAAA,EAAG2N,EAAA,CAAa3N,CAAA;MAChBwD,IAAA,EAAMD;IAAA,GALF,eASK,SAAjBuK,EAAA,KACAE,EAAA,CAAUQ,SAAA,GACNrR,CAAA,CAACgL,CAAA;MAEGjD,KAAA,EAAOP,EAAA;MACPS,MAAA,EAAQJ,EAAA;MACRnF,CAAA,EAAGiO,EAAA,CAAajO,CAAA;MAChBG,CAAA,EAAG8N,EAAA,CAAa9N,CAAA;MAChBwD,IAAA,EAAMlE;IAAA,GALF,gBAWhBmK,CAAA,IAAiBgD,CAAA,KAA4B,MAAjBnN,EAAA,KAC5B0O,EAAA,CAAUS,IAAA,GACNtR,CAAA,CAACwP,EAAA;MAEG9N,MAAA,EAAQyO,EAAA;MACRpI,KAAA,EAAOP,EAAA;MACPS,MAAA,EAAQJ,EAAA;MACRoH,MAAA,EAAQ9H,EAAA;MACRiH,OAAA,EAASoC,EAAA;MACT9C,UAAA,EAAY+C,EAAA;MACZ3C,YAAA,EAAc+B,EAAA;MACd9B,WAAA,EAAa+B,EAAA;MACb9B,YAAA,EAAcrO,EAAA;MACduP,OAAA,EAASnO,EAAA;MACTe,OAAA,EAASd,EAAA;MACTwM,KAAA,EAAOoC;IAAA,GAZH,UAkBZ5P,CAAA,CAACyJ,CAAA;MACG3C,IAAA,EAAM2K,EAAA;MACN1J,KAAA,EAAOiE,EAAA;MACP/D,MAAA,EAAQyE,EAAA;MACRuC,MAAA,EAAQ9H,EAAA;MACRrB,IAAA,EAAMa,EAAA;MAAAvG,QAAA,EAELyI,CAAA,CAAOlH,GAAA,CAAI,UAAC7B,CAAA,EAAOqB,CAAA;QAAA,OACK,qBAAVrB,CAAA,GAEHE,CAAA,CAACgI,CAAA;UAAA5H,QAAA,EACIN,CAAA,CAAA+F,EAAA,KACMhG,CAAA;YACHkQ,UAAA,EAAAvI,EAAA;YACAwI,WAAA,EAAAnI,EAAA;YACA4C,MAAA,EAAAyD,EAAA;YACAnC,MAAA,EAAA0D,EAAA;YACA/N,MAAA,EAAAyO,EAAA;YACArN,MAAA,EAAAwL,EAAA;YACArL,MAAA,EAAA8L,EAAA;YACAnD,aAAA,EAAA0B,EAAA;YACAzB,aAAA,EAAAoC,EAAA;YACAyD,YAAA,EAAAlB,EAAA;YACAmB,eAAA,EAAAlB,EAAA;YACAmB,YAAA,EAAAjB,EAAA;YACAkB,eAAA,EAAAjB;UAAA;QAAA,GAfOzP,CAAA,IAqBhB0P,EAAA,CAAU/Q,CAAA;MAAA;IAAA;EAAA;AAMjC2P,EAAA,CAAK9O,SAAA,GAAYiF,EAAA,EACjB6J,EAAA,CAAKqC,YAAA,GAAenL,EAAA;AAEpB,IAAAwJ,EAAA,GAAezN,CAAA,CAAc+M,EAAA;EChUvBW,EAAA,GAAiB,SAAA2B,CAAAlS,CAAA;IAAA,OACnBG,CAAA,CAAC0J,CAAA;MAAAtJ,QAAA,EACI,SAAA4R,CAAAlS,CAAA;QAAA,IAAGqB,CAAA,GAAArB,CAAA,CAAAiI,KAAA;UAAO1G,CAAA,GAAAvB,CAAA,CAAAmI,MAAA;QAAA,OAAajI,CAAA,CAACmQ,EAAA,EAAAtK,EAAA;UAAKkC,KAAA,EAAO5G,CAAA;UAAO8G,MAAA,EAAQ5G;QAAA,GAAYxB,CAAA;MAAA;IAAA;EAAA;ECUlEwQ,EAAA,GAAa,SAAA4B,CAAApS,CAAA;IAAA,IACfC,CAAA,GAAAD,CAAA,CAAAkI,KAAA;MACAC,CAAA,GAAAnI,CAAA,CAAAoI,MAAA;MACQU,CAAA,GAAA9I,CAAA,CAARoP,MAAA;MACA5L,CAAA,GAAAxD,CAAA,CAAAsG,UAAA;MAEAnB,CAAA,GAAAnF,CAAA,CAAAQ,IAAA;MACQ2F,CAAA,GAAAnG,CAAA,CAARiD,MAAA;MACAmD,CAAA,GAAApG,CAAA,CAAAkD,OAAA;MACQwE,CAAA,GAAA1H,CAAA,CAARoD,MAAA;MACAJ,CAAA,GAAAhD,CAAA,CAAAqD,OAAA;MACAgG,CAAA,GAAArJ,CAAA,CAAAuD,KAAA;MAEA+F,CAAA,GAAAtJ,CAAA,CAAAsD,MAAA;MAEAiG,CAAA,GAAAvJ,CAAA,CAAA8E,MAAA;MACA0E,CAAA,GAAAxJ,CAAA,CAAAqF,SAAA;MAEAxC,CAAA,GAAA7C,CAAA,CAAAgF,UAAA;MACA0E,CAAA,GAAA1J,CAAA,CAAAoF,iBAAA;MACAuE,CAAA,GAAA3J,CAAA,CAAAiF,WAAA;MAEA2E,CAAA,GAAA5J,CAAA,CAAAmE,YAAA;MACA0F,CAAA,GAAA7J,CAAA,CAAAqE,SAAA;MACAU,CAAA,GAAA/E,CAAA,CAAAsE,UAAA;MACA2F,CAAA,GAAAjK,CAAA,CAAAwE,gBAAA;MACA4F,CAAA,GAAApK,CAAA,CAAAyE,gBAAA;MAEAf,CAAA,GAAA1D,CAAA,CAAA8D,WAAA;MACAoG,CAAA,GAAAlK,CAAA,CAAAiE,WAAA;MACAkG,CAAA,GAAAnK,CAAA,CAAAgE,WAAA;MACAuB,CAAA,GAAAvF,CAAA,CAAAkE,WAAA;MACAqG,CAAA,GAAAvK,CAAA,CAAAyD,OAAA;MACArD,CAAA,GAAAJ,CAAA,CAAA2D,SAAA;MACAhC,CAAA,GAAA3B,CAAA,CAAA4D,UAAA;MACA7B,CAAA,GAAA/B,CAAA,CAAA6D,QAAA;MAEAsH,CAAA,GAAAnL,CAAA,CAAAsF,OAAA;MAEAkC,CAAA,GAAAxH,CAAA,CAAAwF,aAAA;MACAqC,CAAA,GAAA7H,CAAA,CAAAyF,SAAA;MAGAgF,CAAA,GAAAzK,CAAA,CAAAmO,YAAA;MACApN,CAAA,GAAAf,CAAA,CAAAqP,OAAA;MACA/O,CAAA,GAAAN,CAAA,CAAAiC,OAAA;MAEAsK,CAAA,GAAAvM,CAAA,CAAAqS,SAAA;MAEM5F,CAAA,GAAW1D,CAAA,CAAO;MAAA0G,CAAA,GAC6ChG,CAAA,CACjExJ,CAAA,EACAkI,CAAA,EACAW,CAAA;MAHIhJ,EAAA,GAAA2P,CAAA,CAAAL,MAAA;MAAQlO,EAAA,GAAAuO,CAAA,CAAAS,UAAA;MAAY/O,EAAA,GAAAsO,CAAA,CAAAU,WAAA;MAAa7N,EAAA,GAAAmN,CAAA,CAAAW,UAAA;MAAY7N,EAAA,GAAAkN,CAAA,CAAAY,WAAA;MAK/CtK,EAAA,GAAQtE,CAAA;MAAA4E,EAAA,GAC0B/E,CAAA,CAAS;MAA1CiF,EAAA,GAAAF,EAAA;MAAcS,EAAA,GAAAT,EAAA;MAAAc,EAAA,GAEoDgC,EAAA,CAAQ;QAC7E3I,IAAA,EAAA2E,CAAA;QACAlC,MAAA,EAAQkD,CAAA;QACRjD,OAAA,EAAAkD,CAAA;QACAhD,MAAA,EAAQsE,CAAA;QACRrE,OAAA,EAAAL,CAAA;QACAkF,KAAA,EAAOhH,EAAA;QACPkH,MAAA,EAAQjH,EAAA;QACR2D,MAAA,EAAAyE,CAAA;QACAhG,KAAA,EAAA8F,CAAA;QACAjE,iBAAA,EAAAsE,CAAA;QACApF,UAAA,EAAAS,CAAA;QACAN,gBAAA,EAAA2F;MAAA;MAZI9C,EAAA,GAAAH,EAAA,CAAA4E,aAAA;MAAepE,EAAA,GAAAR,EAAA,CAAA6E,aAAA;MAAehE,EAAA,GAAAb,EAAA,CAAAyD,MAAA;MAAQuB,EAAA,GAAAhF,EAAA,CAAAlE,MAAA;MAAQ4J,EAAA,GAAA1F,EAAA,CAAA/D,MAAA;MAAQ4J,EAAA,GAAA7F,EAAA,CAAAtF,MAAA;MAAAoL,EAAA,GAehC8C,CAAA,CAAe;QACzClO,MAAA,EAAAmL,EAAA;QACA9E,KAAA,EAAOhH,EAAA;QACPkH,MAAA,EAAQjH,EAAA;QACRwM,KAAA,EAAO9F;MAAA;MAJHwF,EAAA,GAAAJ,EAAA,CAAAqF,QAAA;MAAUhF,EAAA,GAAAL,EAAA,CAAAsF,OAAA;IAOlBvJ,CAAA,CAAU;MACFuD,CAAA,KACAA,CAAA,CAAUgC,OAAA,GAAU9B,CAAA,CAAS8B,OAAA,GAGjC9B,CAAA,CAAS8B,OAAA,CAAQrG,KAAA,GAAQ5F,EAAA,GAAakB,CAAA,EACtCiJ,CAAA,CAAS8B,OAAA,CAAQnG,MAAA,GAAS7F,EAAA,GAAciB,CAAA;MAAA,IAElCxD,CAAA,GAAMyM,CAAA,CAAS8B,OAAA,CAAQiE,UAAA,CAAW;MAExCxS,CAAA,CAAIyS,KAAA,CAAMjP,CAAA,EAAYA,CAAA,GAEtBxD,CAAA,CAAI0S,SAAA,GAAY3M,EAAA,CAAM4M,UAAA,EACtB3S,CAAA,CAAI4S,QAAA,CAAS,GAAG,GAAGtQ,EAAA,EAAYC,EAAA,GAC/BvC,CAAA,CAAI6S,SAAA,CAAU/S,EAAA,CAAOyP,IAAA,EAAMzP,EAAA,CAAO0P,GAAA,GAElClG,CAAA,CAAOhB,OAAA,CAAQ,UAAArI,CAAA;QAAA,IACU,qBAAVA,CAAA,IACPA,CAAA,CAAM;UACF6S,GAAA,EAAA9S,CAAA;UACAkQ,UAAA,EAAAhP,EAAA;UACAiP,WAAA,EAAAhP,EAAA;UACAyJ,MAAA,EAAA5C,EAAA;UACAnG,MAAA,EAAAmL,EAAA;UACA/J,MAAA,EAAAkJ,EAAA;UACA/I,MAAA,EAAAyJ,EAAA;UACAxH,SAAA,EAAAmE,CAAA;UACAuC,aAAA,EAAAzE,EAAA;UACA0E,aAAA,EAAArE,EAAA;UACAkK,YAAA,EAAAtL,EAAA;UACAuL,eAAA,EAAAhL;QAAA,IAIM,WAAV7G,CAAA,IAAoB8F,EAAA,CAAMkL,IAAA,CAAK8B,IAAA,CAAKpG,WAAA,GAAc,MAClD3M,CAAA,CAAIqF,SAAA,GAAYU,EAAA,CAAMkL,IAAA,CAAK8B,IAAA,CAAKpG,WAAA,EAChC3M,CAAA,CAAIgT,WAAA,GAAcjN,EAAA,CAAMkL,IAAA,CAAK8B,IAAA,CAAK3F,MAAA,EAElC1J,CAAA,IACI2G,CAAA,CAAwBrK,CAAA,EAAK;UACzBkI,KAAA,EAAOhH,EAAA;UACPkH,MAAA,EAAQjH,EAAA;UACRsR,KAAA,EAAOtG,EAAA;UACP5K,IAAA,EAAM;UACN0R,MAAA,EAAQ/I;QAAA,IAGhBC,CAAA,IACIE,CAAA,CAAwBrK,CAAA,EAAK;UACzBkI,KAAA,EAAOhH,EAAA;UACPkH,MAAA,EAAQjH,EAAA;UACRsR,KAAA,EAAO5F,EAAA;UACPtL,IAAA,EAAM;UACN0R,MAAA,EAAQ1N;QAAA,KAIN,WAAVtF,CAAA,IACAqK,CAAA,CAAmBtK,CAAA,EAAK;UACpBiD,MAAA,EAAAkJ,EAAA;UACA/I,MAAA,EAAAyJ,EAAA;UACA3E,KAAA,EAAOhH,EAAA;UACPkH,MAAA,EAAQjH,EAAA;UACRqO,GAAA,EAAKjF,CAAA;UACL8G,KAAA,EAAOjR,CAAA;UACPkR,MAAA,EAAQ3P,CAAA;UACR4N,IAAA,EAAMxN,CAAA;UACN6E,KAAA,EAAAb;QAAA,IAIM,YAAV9F,CAAA,KAAoC,MAAf4C,CAAA,KACrB7C,CAAA,CAAIkT,IAAA,IACJlT,CAAA,CAAImT,WAAA,GAAcxJ,CAAA,EAElBhC,EAAA,CAAcyL,OAAA,CAAQpT,CAAA,GACtBgI,EAAA,CAAOM,OAAA,CAAQ,UAAArI,CAAA;UACXD,CAAA,CAAI0S,SAAA,GAAYzS,CAAA,CAAMW,KAAA,EACtBZ,CAAA,CAAIqT,SAAA,IACJ1L,EAAA,CAAc1H,CAAA,CAAMO,IAAA,CAAKsB,GAAA,CAAI,UAAA9B,CAAA;YAAA,OAAKA,CAAA,CAAE0L,QAAA;UAAA,KACpC1L,CAAA,CAAIkH,IAAA;QAAA,IAGRlH,CAAA,CAAIsT,OAAA,KAGM,YAAVrT,CAAA,KACAqH,EAAA,CAAc8L,OAAA,CAAQpT,CAAA,GACtBgI,EAAA,CAAOM,OAAA,CAAQ,UAAArI,CAAA;UACXD,CAAA,CAAIgT,WAAA,GAAc/S,CAAA,CAAMW,KAAA,EACxBZ,CAAA,CAAIqF,SAAA,GAAYmE,CAAA,EAChBxJ,CAAA,CAAIqT,SAAA,IACJ/L,EAAA,CAAcrH,CAAA,CAAMO,IAAA,CAAKsB,GAAA,CAAI,UAAA9B,CAAA;YAAA,OAAKA,CAAA,CAAE0L,QAAA;UAAA,KACpC1L,CAAA,CAAIoN,MAAA;QAAA,KAIE,aAAVnN,CAAA,KAAuC,MAAjB2J,CAAA,IAAyBC,CAAA,GAAY,KAC3DmD,EAAA,CAAO1E,OAAA,CAAQ,UAAArI,CAAA;UACXD,CAAA,CAAI0S,SAAA,GAAYzS,CAAA,CAAMW,KAAA,EACtBZ,CAAA,CAAIqT,SAAA,IACJrT,CAAA,CAAIuT,GAAA,CAAItT,CAAA,CAAM4C,CAAA,EAAG5C,CAAA,CAAM+C,CAAA,EAAG6G,CAAA,GAAY,GAAG,GAAG,IAAI2J,IAAA,CAAKC,EAAA,GACrDzT,CAAA,CAAIkH,IAAA,IAEA+C,CAAA,GAAmB,MACnBjK,CAAA,CAAIgT,WAAA,GAAc/S,CAAA,CAAM4L,WAAA,EACxB7L,CAAA,CAAIqF,SAAA,GAAY4E,CAAA,EAChBjK,CAAA,CAAIoN,MAAA;QAAA,IAKF,WAAVnN,CAAA,KAAkC,MAAd4H,CAAA,KACpBmI,EAAA,CAAsBhQ,CAAA,EAAKsN,EAAA,GACvB/G,EAAA,IACA0J,EAAA,CAA0BjQ,CAAA,EAAKsN,EAAA,EAAS/G,EAAA,CAAaoF,KAAA,IAI/C,cAAV1L,CAAA,EAAqB;UAAA,IACfqB,CAAA,GAAa0G,EAAA,CACdlG,GAAA,CAAI,UAAA9B,CAAA;YAAA,OAAU;cACXK,EAAA,EAAIL,CAAA,CAAMK,EAAA;cACVyK,KAAA,EAAO9K,CAAA,CAAMK,EAAA;cACbO,KAAA,EAAOZ,CAAA,CAAMY;YAAA;UAAA,GAEhBsI,OAAA;UAELiC,CAAA,CAAQ7C,OAAA,CAAQ,UAAArI,CAAA;YACZuK,CAAA,CAAqBxK,CAAA,EAAAgG,EAAA,KACd/F,CAAA;cACHO,IAAA,EAAMP,CAAA,CAAOO,IAAA,IAAQc,CAAA;cACrBoQ,cAAA,EAAgBxQ,EAAA;cAChByQ,eAAA,EAAiBxQ,EAAA;cACjByF,KAAA,EAAAb;YAAA;UAAA;QAAA;MAAA;IAAA,GAKjB,CACC0G,CAAA,EACAnK,EAAA,EACAC,EAAA,EACA+G,CAAA,EACAvD,EAAA,EACAuB,EAAA,EACAU,EAAA,EACAmE,EAAA,EACAU,EAAA,EACAnJ,CAAA,EACAwG,CAAA,EACAC,CAAA,EACA5E,CAAA,EACAgF,CAAA,EACAnK,CAAA,EACAuB,CAAA,EACAI,CAAA,EACAoJ,CAAA,EACA6B,EAAA,EACApD,CAAA,EACAC,CAAA,EACAtD,EAAA;IAAA,IAGEiH,EAAA,GAAyBhM,CAAA,CAC3B,UAAAxB,CAAA;QAAA,IAAAC,CAAA,GACmB6J,CAAA,CAAkB2C,CAAA,CAAS8B,OAAA,EAASvO,CAAA;UAA5CsB,CAAA,GAAArB,CAAA;UAAGuB,CAAA,GAAAvB,CAAA;QAAA,KACL+J,CAAA,CAAelK,EAAA,CAAOyP,IAAA,EAAMzP,EAAA,CAAO0P,GAAA,EAAKtO,EAAA,EAAYC,EAAA,EAAaG,CAAA,EAAGE,CAAA,GAAI,OAAO;QAAA,IAE9EE,CAAA,GAAa2L,EAAA,CAAStC,IAAA,CAAKzJ,CAAA,GAAIxB,EAAA,CAAOyP,IAAA,EAAM/N,CAAA,GAAI1B,EAAA,CAAO0P,GAAA;QAAA,OACtDxC,EAAA,CAAOtL,CAAA;MAAA,GAElB,CAAC+K,CAAA,EAAU3M,EAAA,EAAQoB,EAAA,EAAYC,EAAA,EAAakM,EAAA;MAAAI,EAAA,GAGF5C,CAAA;MAAtCuD,EAAA,GAAAX,EAAA,CAAAK,oBAAA;MAAsBO,EAAA,GAAAZ,EAAA,CAAAM,WAAA;MAExBS,EAAA,GAAmBhN,CAAA,CACrB,UAAAxB,CAAA;QAAA,IACUC,CAAA,GAAQuN,EAAA,CAAuBxN,CAAA;QACrC8G,EAAA,CAAgB7G,CAAA,GAEZA,CAAA,GACAmO,EAAA,CAAqB1M,CAAA,CAAcpB,CAAA,EAAS;UAAEJ,KAAA,EAAAD;QAAA,IAAUD,CAAA,IAExDqO,EAAA;MAAA,GAGR,CAACb,EAAA,EAAwB1G,EAAA,EAAiBsH,EAAA,EAAsBC,EAAA,EAAa/N,CAAA;MAG3EmO,EAAA,GAAmBjN,CAAA,CACrB,UAAAxB,CAAA;QACIqO,EAAA,IACAvH,EAAA,CAAgB,OAChBP,EAAA,IAAgBkE,CAAA,IAAgBA,CAAA,CAAalE,EAAA,EAAcvG,CAAA;MAAA,GAE/D,CAACqO,EAAA,EAAavH,EAAA,EAAiB2D,CAAA;MAG7BwE,EAAA,GAAczN,CAAA,CAChB,UAAAxB,CAAA;QAAA,IACQe,CAAA,EAAS;UAAA,IACHd,CAAA,GAAQuN,EAAA,CAAuBxN,CAAA;UACrCC,CAAA,IAASc,CAAA,CAAQd,CAAA,EAAOD,CAAA;QAAA;MAAA,GAGhC,CAACwN,EAAA,EAAwBzM,CAAA;IAAA,OAIzBZ,CAAA;MACIuT,GAAA,EAAKjH,CAAA;MACLvE,KAAA,EAAO5F,EAAA,GAAakB,CAAA;MACpB4E,MAAA,EAAQ7F,EAAA,GAAciB,CAAA;MACtBxB,KAAA,EAAO;QACHkG,KAAA,EAAO5F,EAAA;QACP8F,MAAA,EAAQ7F,EAAA;QACRoR,MAAA,EAAQnM,CAAA,GAAgB,SAAS;MAAA;MAErCyG,YAAA,EAAczG,CAAA,GAAgBgH,EAAA,QAAmB;MACjDN,WAAA,EAAa1G,CAAA,GAAgBgH,EAAA,QAAmB;MAChDL,YAAA,EAAc3G,CAAA,GAAgBiH,EAAA,QAAmB;MACjDY,OAAA,EAAS7H,CAAA,GAAgByH,EAAA,QAAc;IAAA;EAAA;AAKnDuB,EAAA,CAAW1P,SAAA,GAAYuF,EAAA,EACvBmK,EAAA,CAAWyB,YAAA,GAAe9K,EAAA;AAE1B,IAAMsJ,EAAA,GAA0B5N,CAAA,CAAc2N,EAAA;EAAAE,EAAA,GAE/B5H,CAAA,CAAW,UAAC9I,CAAA,EAAOC,CAAA;IAAA,OAAQE,CAAA,CAACsQ,EAAA,EAAAzK,EAAA,KAA4BhG,CAAA;MAAOqS,SAAA,EAAWpS;IAAA;EAAA;EAAA0Q,EAAA,GC9T1E7H,CAAA,CANc,UAAC9I,CAAA,EAAOC,CAAA;IAAA,OACjCE,CAAA,CAAC0J,CAAA;MAAAtJ,QAAA,EACI,SAAA4R,CAAA7Q,CAAA;QAAA,IAAGE,CAAA,GAAAF,CAAA,CAAA4G,KAAA;UAAOxG,CAAA,GAAAJ,CAAA,CAAA8G,MAAA;QAAA,OAAajI,CAAA,CAACuQ,EAAA,EAAA1K,EAAA;UAAWkC,KAAA,EAAO1G,CAAA;UAAO4G,MAAA,EAAQ1G;QAAA,GAAY1B,CAAA;UAAO0T,GAAA,EAAKzT;QAAA;MAAA;IAAA;EAAA;AAAA,SAAAqQ,EAAA,IAAAT,IAAA,EAAAa,EAAA,IAAA0B,UAAA,EAAAjL,EAAA,IAAAyM,sBAAA,EAAAvN,EAAA,IAAAwN,mBAAA,EAAA/M,EAAA,IAAAgN,gBAAA,EAAA/N,EAAA,IAAAgO,aAAA,EAAAxD,EAAA,IAAA2B,cAAA,EAAAvB,EAAA,IAAAqD,oBAAA,EAAArM,EAAA,IAAAC,gBAAA,EAAAuB,EAAA,IAAAC,OAAA,EAAA9B,EAAA,IAAAC,gBAAA,EAAAS,EAAA,IAAAC,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}