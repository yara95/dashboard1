{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback(function (field) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(_ref => {\n    let {\n      id,\n      field\n    } = _ref;\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback((_ref2, event) => {\n    let {\n      field\n    } = _ref2;\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n      return;\n    }\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    }\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate(); // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n    const cell = gridFocusCellSelector(apiRef);\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus,\n    setColumnHeaderFocus,\n    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell\n  }, 'GridFocusApi');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};","map":{"version":3,"names":["_extends","React","ownerDocument","useGridApiMethod","useGridLogger","useGridApiEventHandler","isNavigationKey","gridFocusCellSelector","gridVisibleColumnDefinitionsSelector","getVisibleRows","clamp","focusStateInitializer","state","focus","cell","columnHeader","tabIndex","useGridFocus","apiRef","props","logger","lastClickedCell","useRef","publishCellFocusOut","useCallback","event","current","getRow","id","publishEvent","getCellParams","field","setCellFocus","focusedCell","setState","debug","forceUpdate","setColumnHeaderFocus","arguments","length","undefined","moveFocusToRelativeCell","direction","columnIndexToFocus","getColumnIndex","rowIndexToFocus","getRowIndexRelativeToVisibleRows","visibleColumns","currentPage","pagination","paginationMode","rows","rowToFocus","colSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","columnToFocus","handleCellDoubleClick","_ref","handleCellKeyDown","params","key","handleColumnHeaderFocus","_ref2","target","currentTarget","handleBlur","handleCellMouseDown","handleDocumentClick","cellParams","cellElement","getCellElement","contains","handleCellModeChange","cellMode","handleRowSet","unstable_moveFocusToRelativeCell","useEffect","doc","rootElementRef","addEventListener","removeEventListener"],"sources":["/Users/mtc/Yara/task2/react-admin/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    }\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate(); // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    const cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus,\n    setColumnHeaderFocus,\n    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell\n  }, 'GridFocusApi');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}