{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"rowsBeforePartialUpdates\"];\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\n/**\n * A helper function to check if the id provided is valid.\n * @param {GridRowId} id Id as [[GridRowId]].\n * @param {GridRowModel | Partial<GridRowModel>} row Row as [[GridRowModel]].\n * @param {string} detailErrorMessage A custom error message to display for invalid IDs\n */\n\nexport function checkGridRowIdIsValid(id, row) {\n  let detailErrorMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'A row was provided without id in the rows prop:';\n  if (id == null) {\n    throw new Error(['MUI: The data grid component requires all rows to have a unique `id` property.', 'Alternatively, you can use the `getRowId` prop to specify a custom id for each row.', detailErrorMessage, JSON.stringify(row)].join('\\n'));\n  }\n}\nexport const getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {\n  const id = getRowId ? getRowId(rowModel) : rowModel.id;\n  checkGridRowIdIsValid(id, rowModel, detailErrorMessage);\n  return id;\n};\nexport const createRowsInternalCache = _ref => {\n  let {\n    rows,\n    getRowId,\n    loading,\n    rowCount\n  } = _ref;\n  const cache = {\n    rowsBeforePartialUpdates: rows,\n    loadingPropBeforePartialUpdates: loading,\n    rowCountPropBeforePartialUpdates: rowCount,\n    idRowsLookup: {},\n    idToIdLookup: {},\n    ids: []\n  };\n  for (let i = 0; i < rows.length; i += 1) {\n    const row = rows[i];\n    const id = getRowIdFromRowModel(row, getRowId);\n    cache.idRowsLookup[id] = row;\n    cache.idToIdLookup[id] = id;\n    cache.ids.push(id);\n  }\n  return cache;\n};\nexport const getRowsStateFromCache = _ref2 => {\n  let {\n    apiRef,\n    previousTree,\n    rowCountProp,\n    loadingProp\n  } = _ref2;\n  const _apiRef$current$unsta = apiRef.current.unstable_caches.rows,\n    cacheForGrouping = _objectWithoutPropertiesLoose(_apiRef$current$unsta, _excluded);\n  const rowCount = rowCountProp != null ? rowCountProp : 0;\n  const groupingResponse = apiRef.current.unstable_applyStrategyProcessor('rowTreeCreation', _extends({}, cacheForGrouping, {\n    previousTree\n  }));\n  const processedGroupingResponse = apiRef.current.unstable_applyPipeProcessors('hydrateRows', groupingResponse);\n  const dataTopLevelRowCount = processedGroupingResponse.treeDepth === 1 ? processedGroupingResponse.ids.length : Object.values(processedGroupingResponse.tree).filter(node => node.parent == null && !node.isPinned).length;\n  return _extends({}, processedGroupingResponse, {\n    groupingResponseBeforeRowHydration: groupingResponse,\n    loading: loadingProp,\n    totalRowCount: Math.max(rowCount, processedGroupingResponse.ids.length),\n    totalTopLevelRowCount: Math.max(rowCount, dataTopLevelRowCount)\n  });\n};\nexport const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {\n  var _tree$parentId;\n  const children = (_tree$parentId = tree[parentId]) == null ? void 0 : _tree$parentId.children;\n  if (children == null) {\n    return [];\n  }\n  const validDescendants = [];\n  for (let i = 0; i < children.length; i += 1) {\n    const child = children[i];\n    const childNode = tree[child];\n    if (!skipAutoGeneratedRows || !childNode.isAutoGenerated) {\n      validDescendants.push(child);\n    }\n    validDescendants.push(...getTreeNodeDescendants(tree, childNode.id, skipAutoGeneratedRows));\n  }\n  return validDescendants;\n};\nexport function calculatePinnedRowsHeight(apiRef) {\n  var _pinnedRows$top, _pinnedRows$bottom;\n  const pinnedRows = gridPinnedRowsSelector(apiRef);\n  const topPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0)) || 0;\n  const bottomPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0)) || 0;\n  return {\n    top: topPinnedRowsHeight,\n    bottom: bottomPinnedRowsHeight\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","gridPinnedRowsSelector","checkGridRowIdIsValid","id","row","detailErrorMessage","arguments","length","undefined","Error","JSON","stringify","join","getRowIdFromRowModel","rowModel","getRowId","createRowsInternalCache","_ref","rows","loading","rowCount","cache","rowsBeforePartialUpdates","loadingPropBeforePartialUpdates","rowCountPropBeforePartialUpdates","idRowsLookup","idToIdLookup","ids","i","push","getRowsStateFromCache","_ref2","apiRef","previousTree","rowCountProp","loadingProp","_apiRef$current$unsta","current","unstable_caches","cacheForGrouping","groupingResponse","unstable_applyStrategyProcessor","processedGroupingResponse","unstable_applyPipeProcessors","dataTopLevelRowCount","treeDepth","Object","values","tree","filter","node","parent","isPinned","groupingResponseBeforeRowHydration","totalRowCount","Math","max","totalTopLevelRowCount","getTreeNodeDescendants","parentId","skipAutoGeneratedRows","_tree$parentId","children","validDescendants","child","childNode","isAutoGenerated","calculatePinnedRowsHeight","_pinnedRows$top","_pinnedRows$bottom","pinnedRows","topPinnedRowsHeight","top","reduce","acc","value","unstable_getRowHeight","bottomPinnedRowsHeight","bottom"],"sources":["/Users/mtc/Yara/task2/react-admin/node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"rowsBeforePartialUpdates\"];\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\n/**\n * A helper function to check if the id provided is valid.\n * @param {GridRowId} id Id as [[GridRowId]].\n * @param {GridRowModel | Partial<GridRowModel>} row Row as [[GridRowModel]].\n * @param {string} detailErrorMessage A custom error message to display for invalid IDs\n */\n\nexport function checkGridRowIdIsValid(id, row, detailErrorMessage = 'A row was provided without id in the rows prop:') {\n  if (id == null) {\n    throw new Error(['MUI: The data grid component requires all rows to have a unique `id` property.', 'Alternatively, you can use the `getRowId` prop to specify a custom id for each row.', detailErrorMessage, JSON.stringify(row)].join('\\n'));\n  }\n}\nexport const getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {\n  const id = getRowId ? getRowId(rowModel) : rowModel.id;\n  checkGridRowIdIsValid(id, rowModel, detailErrorMessage);\n  return id;\n};\nexport const createRowsInternalCache = ({\n  rows,\n  getRowId,\n  loading,\n  rowCount\n}) => {\n  const cache = {\n    rowsBeforePartialUpdates: rows,\n    loadingPropBeforePartialUpdates: loading,\n    rowCountPropBeforePartialUpdates: rowCount,\n    idRowsLookup: {},\n    idToIdLookup: {},\n    ids: []\n  };\n\n  for (let i = 0; i < rows.length; i += 1) {\n    const row = rows[i];\n    const id = getRowIdFromRowModel(row, getRowId);\n    cache.idRowsLookup[id] = row;\n    cache.idToIdLookup[id] = id;\n    cache.ids.push(id);\n  }\n\n  return cache;\n};\nexport const getRowsStateFromCache = ({\n  apiRef,\n  previousTree,\n  rowCountProp,\n  loadingProp\n}) => {\n  const _apiRef$current$unsta = apiRef.current.unstable_caches.rows,\n        cacheForGrouping = _objectWithoutPropertiesLoose(_apiRef$current$unsta, _excluded);\n\n  const rowCount = rowCountProp != null ? rowCountProp : 0;\n  const groupingResponse = apiRef.current.unstable_applyStrategyProcessor('rowTreeCreation', _extends({}, cacheForGrouping, {\n    previousTree\n  }));\n  const processedGroupingResponse = apiRef.current.unstable_applyPipeProcessors('hydrateRows', groupingResponse);\n  const dataTopLevelRowCount = processedGroupingResponse.treeDepth === 1 ? processedGroupingResponse.ids.length : Object.values(processedGroupingResponse.tree).filter(node => node.parent == null && !node.isPinned).length;\n  return _extends({}, processedGroupingResponse, {\n    groupingResponseBeforeRowHydration: groupingResponse,\n    loading: loadingProp,\n    totalRowCount: Math.max(rowCount, processedGroupingResponse.ids.length),\n    totalTopLevelRowCount: Math.max(rowCount, dataTopLevelRowCount)\n  });\n};\nexport const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {\n  var _tree$parentId;\n\n  const children = (_tree$parentId = tree[parentId]) == null ? void 0 : _tree$parentId.children;\n\n  if (children == null) {\n    return [];\n  }\n\n  const validDescendants = [];\n\n  for (let i = 0; i < children.length; i += 1) {\n    const child = children[i];\n    const childNode = tree[child];\n\n    if (!skipAutoGeneratedRows || !childNode.isAutoGenerated) {\n      validDescendants.push(child);\n    }\n\n    validDescendants.push(...getTreeNodeDescendants(tree, childNode.id, skipAutoGeneratedRows));\n  }\n\n  return validDescendants;\n};\nexport function calculatePinnedRowsHeight(apiRef) {\n  var _pinnedRows$top, _pinnedRows$bottom;\n\n  const pinnedRows = gridPinnedRowsSelector(apiRef);\n  const topPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0)) || 0;\n  const bottomPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.reduce((acc, value) => {\n    acc += apiRef.current.unstable_getRowHeight(value.id);\n    return acc;\n  }, 0)) || 0;\n  return {\n    top: topPinnedRowsHeight,\n    bottom: bottomPinnedRowsHeight\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}